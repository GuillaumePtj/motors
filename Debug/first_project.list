
first_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057f8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  080059d0  080059d0  000159d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005be8  08005be8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005be8  08005be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bf0  08005bf0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bf0  08005bf0  00015bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bf4  08005bf4  00015bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000010  08005c08  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08005c08  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011680  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000248b  00000000  00000000  00031703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  00033b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c49  00000000  00000000  00034b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e50d  00000000  00000000  00035799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013330  00000000  00000000  00053ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5a22  00000000  00000000  00066fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004634  00000000  00000000  0012c9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0013102c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080059b8 	.word	0x080059b8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080059b8 	.word	0x080059b8

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2iz>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008fc:	d215      	bcs.n	800092a <__aeabi_d2iz+0x36>
 80008fe:	d511      	bpl.n	8000924 <__aeabi_d2iz+0x30>
 8000900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d912      	bls.n	8000930 <__aeabi_d2iz+0x3c>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800091a:	fa23 f002 	lsr.w	r0, r3, r2
 800091e:	bf18      	it	ne
 8000920:	4240      	negne	r0, r0
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d105      	bne.n	800093c <__aeabi_d2iz+0x48>
 8000930:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000934:	bf08      	it	eq
 8000936:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_d2uiz>:
 8000944:	004a      	lsls	r2, r1, #1
 8000946:	d211      	bcs.n	800096c <__aeabi_d2uiz+0x28>
 8000948:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800094c:	d211      	bcs.n	8000972 <__aeabi_d2uiz+0x2e>
 800094e:	d50d      	bpl.n	800096c <__aeabi_d2uiz+0x28>
 8000950:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000954:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000958:	d40e      	bmi.n	8000978 <__aeabi_d2uiz+0x34>
 800095a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800095e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000962:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000966:	fa23 f002 	lsr.w	r0, r3, r2
 800096a:	4770      	bx	lr
 800096c:	f04f 0000 	mov.w	r0, #0
 8000970:	4770      	bx	lr
 8000972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000976:	d102      	bne.n	800097e <__aeabi_d2uiz+0x3a>
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	4770      	bx	lr
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	4770      	bx	lr

08000984 <__aeabi_d2f>:
 8000984:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000988:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800098c:	bf24      	itt	cs
 800098e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000992:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000996:	d90d      	bls.n	80009b4 <__aeabi_d2f+0x30>
 8000998:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800099c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ac:	bf08      	it	eq
 80009ae:	f020 0001 	biceq.w	r0, r0, #1
 80009b2:	4770      	bx	lr
 80009b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b8:	d121      	bne.n	80009fe <__aeabi_d2f+0x7a>
 80009ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009be:	bfbc      	itt	lt
 80009c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009c4:	4770      	bxlt	lr
 80009c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ce:	f1c2 0218 	rsb	r2, r2, #24
 80009d2:	f1c2 0c20 	rsb	ip, r2, #32
 80009d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009da:	fa20 f002 	lsr.w	r0, r0, r2
 80009de:	bf18      	it	ne
 80009e0:	f040 0001 	orrne.w	r0, r0, #1
 80009e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f0:	ea40 000c 	orr.w	r0, r0, ip
 80009f4:	fa23 f302 	lsr.w	r3, r3, r2
 80009f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009fc:	e7cc      	b.n	8000998 <__aeabi_d2f+0x14>
 80009fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a02:	d107      	bne.n	8000a14 <__aeabi_d2f+0x90>
 8000a04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a08:	bf1e      	ittt	ne
 8000a0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a12:	4770      	bxne	lr
 8000a14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_uldivmod>:
 8000a24:	b953      	cbnz	r3, 8000a3c <__aeabi_uldivmod+0x18>
 8000a26:	b94a      	cbnz	r2, 8000a3c <__aeabi_uldivmod+0x18>
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	bf08      	it	eq
 8000a2c:	2800      	cmpeq	r0, #0
 8000a2e:	bf1c      	itt	ne
 8000a30:	f04f 31ff 	movne.w	r1, #4294967295
 8000a34:	f04f 30ff 	movne.w	r0, #4294967295
 8000a38:	f000 b970 	b.w	8000d1c <__aeabi_idiv0>
 8000a3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a44:	f000 f806 	bl	8000a54 <__udivmoddi4>
 8000a48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a50:	b004      	add	sp, #16
 8000a52:	4770      	bx	lr

08000a54 <__udivmoddi4>:
 8000a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a58:	9e08      	ldr	r6, [sp, #32]
 8000a5a:	460d      	mov	r5, r1
 8000a5c:	4604      	mov	r4, r0
 8000a5e:	460f      	mov	r7, r1
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d14a      	bne.n	8000afa <__udivmoddi4+0xa6>
 8000a64:	428a      	cmp	r2, r1
 8000a66:	4694      	mov	ip, r2
 8000a68:	d965      	bls.n	8000b36 <__udivmoddi4+0xe2>
 8000a6a:	fab2 f382 	clz	r3, r2
 8000a6e:	b143      	cbz	r3, 8000a82 <__udivmoddi4+0x2e>
 8000a70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a74:	f1c3 0220 	rsb	r2, r3, #32
 8000a78:	409f      	lsls	r7, r3
 8000a7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a7e:	4317      	orrs	r7, r2
 8000a80:	409c      	lsls	r4, r3
 8000a82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a86:	fa1f f58c 	uxth.w	r5, ip
 8000a8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a8e:	0c22      	lsrs	r2, r4, #16
 8000a90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a98:	fb01 f005 	mul.w	r0, r1, r5
 8000a9c:	4290      	cmp	r0, r2
 8000a9e:	d90a      	bls.n	8000ab6 <__udivmoddi4+0x62>
 8000aa0:	eb1c 0202 	adds.w	r2, ip, r2
 8000aa4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000aa8:	f080 811c 	bcs.w	8000ce4 <__udivmoddi4+0x290>
 8000aac:	4290      	cmp	r0, r2
 8000aae:	f240 8119 	bls.w	8000ce4 <__udivmoddi4+0x290>
 8000ab2:	3902      	subs	r1, #2
 8000ab4:	4462      	add	r2, ip
 8000ab6:	1a12      	subs	r2, r2, r0
 8000ab8:	b2a4      	uxth	r4, r4
 8000aba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000abe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ac2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ac6:	fb00 f505 	mul.w	r5, r0, r5
 8000aca:	42a5      	cmp	r5, r4
 8000acc:	d90a      	bls.n	8000ae4 <__udivmoddi4+0x90>
 8000ace:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ad6:	f080 8107 	bcs.w	8000ce8 <__udivmoddi4+0x294>
 8000ada:	42a5      	cmp	r5, r4
 8000adc:	f240 8104 	bls.w	8000ce8 <__udivmoddi4+0x294>
 8000ae0:	4464      	add	r4, ip
 8000ae2:	3802      	subs	r0, #2
 8000ae4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ae8:	1b64      	subs	r4, r4, r5
 8000aea:	2100      	movs	r1, #0
 8000aec:	b11e      	cbz	r6, 8000af6 <__udivmoddi4+0xa2>
 8000aee:	40dc      	lsrs	r4, r3
 8000af0:	2300      	movs	r3, #0
 8000af2:	e9c6 4300 	strd	r4, r3, [r6]
 8000af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0xbc>
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	f000 80ed 	beq.w	8000cde <__udivmoddi4+0x28a>
 8000b04:	2100      	movs	r1, #0
 8000b06:	e9c6 0500 	strd	r0, r5, [r6]
 8000b0a:	4608      	mov	r0, r1
 8000b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b10:	fab3 f183 	clz	r1, r3
 8000b14:	2900      	cmp	r1, #0
 8000b16:	d149      	bne.n	8000bac <__udivmoddi4+0x158>
 8000b18:	42ab      	cmp	r3, r5
 8000b1a:	d302      	bcc.n	8000b22 <__udivmoddi4+0xce>
 8000b1c:	4282      	cmp	r2, r0
 8000b1e:	f200 80f8 	bhi.w	8000d12 <__udivmoddi4+0x2be>
 8000b22:	1a84      	subs	r4, r0, r2
 8000b24:	eb65 0203 	sbc.w	r2, r5, r3
 8000b28:	2001      	movs	r0, #1
 8000b2a:	4617      	mov	r7, r2
 8000b2c:	2e00      	cmp	r6, #0
 8000b2e:	d0e2      	beq.n	8000af6 <__udivmoddi4+0xa2>
 8000b30:	e9c6 4700 	strd	r4, r7, [r6]
 8000b34:	e7df      	b.n	8000af6 <__udivmoddi4+0xa2>
 8000b36:	b902      	cbnz	r2, 8000b3a <__udivmoddi4+0xe6>
 8000b38:	deff      	udf	#255	; 0xff
 8000b3a:	fab2 f382 	clz	r3, r2
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 8090 	bne.w	8000c64 <__udivmoddi4+0x210>
 8000b44:	1a8a      	subs	r2, r1, r2
 8000b46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4a:	fa1f fe8c 	uxth.w	lr, ip
 8000b4e:	2101      	movs	r1, #1
 8000b50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b54:	fb07 2015 	mls	r0, r7, r5, r2
 8000b58:	0c22      	lsrs	r2, r4, #16
 8000b5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b5e:	fb0e f005 	mul.w	r0, lr, r5
 8000b62:	4290      	cmp	r0, r2
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0x124>
 8000b66:	eb1c 0202 	adds.w	r2, ip, r2
 8000b6a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x122>
 8000b70:	4290      	cmp	r0, r2
 8000b72:	f200 80cb 	bhi.w	8000d0c <__udivmoddi4+0x2b8>
 8000b76:	4645      	mov	r5, r8
 8000b78:	1a12      	subs	r2, r2, r0
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b80:	fb07 2210 	mls	r2, r7, r0, r2
 8000b84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b88:	fb0e fe00 	mul.w	lr, lr, r0
 8000b8c:	45a6      	cmp	lr, r4
 8000b8e:	d908      	bls.n	8000ba2 <__udivmoddi4+0x14e>
 8000b90:	eb1c 0404 	adds.w	r4, ip, r4
 8000b94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b98:	d202      	bcs.n	8000ba0 <__udivmoddi4+0x14c>
 8000b9a:	45a6      	cmp	lr, r4
 8000b9c:	f200 80bb 	bhi.w	8000d16 <__udivmoddi4+0x2c2>
 8000ba0:	4610      	mov	r0, r2
 8000ba2:	eba4 040e 	sub.w	r4, r4, lr
 8000ba6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000baa:	e79f      	b.n	8000aec <__udivmoddi4+0x98>
 8000bac:	f1c1 0720 	rsb	r7, r1, #32
 8000bb0:	408b      	lsls	r3, r1
 8000bb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bba:	fa05 f401 	lsl.w	r4, r5, r1
 8000bbe:	fa20 f307 	lsr.w	r3, r0, r7
 8000bc2:	40fd      	lsrs	r5, r7
 8000bc4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc8:	4323      	orrs	r3, r4
 8000bca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bce:	fa1f fe8c 	uxth.w	lr, ip
 8000bd2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bd6:	0c1c      	lsrs	r4, r3, #16
 8000bd8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bdc:	fb08 f50e 	mul.w	r5, r8, lr
 8000be0:	42a5      	cmp	r5, r4
 8000be2:	fa02 f201 	lsl.w	r2, r2, r1
 8000be6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bea:	d90b      	bls.n	8000c04 <__udivmoddi4+0x1b0>
 8000bec:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bf4:	f080 8088 	bcs.w	8000d08 <__udivmoddi4+0x2b4>
 8000bf8:	42a5      	cmp	r5, r4
 8000bfa:	f240 8085 	bls.w	8000d08 <__udivmoddi4+0x2b4>
 8000bfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000c02:	4464      	add	r4, ip
 8000c04:	1b64      	subs	r4, r4, r5
 8000c06:	b29d      	uxth	r5, r3
 8000c08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c18:	45a6      	cmp	lr, r4
 8000c1a:	d908      	bls.n	8000c2e <__udivmoddi4+0x1da>
 8000c1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c20:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c24:	d26c      	bcs.n	8000d00 <__udivmoddi4+0x2ac>
 8000c26:	45a6      	cmp	lr, r4
 8000c28:	d96a      	bls.n	8000d00 <__udivmoddi4+0x2ac>
 8000c2a:	3b02      	subs	r3, #2
 8000c2c:	4464      	add	r4, ip
 8000c2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c32:	fba3 9502 	umull	r9, r5, r3, r2
 8000c36:	eba4 040e 	sub.w	r4, r4, lr
 8000c3a:	42ac      	cmp	r4, r5
 8000c3c:	46c8      	mov	r8, r9
 8000c3e:	46ae      	mov	lr, r5
 8000c40:	d356      	bcc.n	8000cf0 <__udivmoddi4+0x29c>
 8000c42:	d053      	beq.n	8000cec <__udivmoddi4+0x298>
 8000c44:	b156      	cbz	r6, 8000c5c <__udivmoddi4+0x208>
 8000c46:	ebb0 0208 	subs.w	r2, r0, r8
 8000c4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c52:	40ca      	lsrs	r2, r1
 8000c54:	40cc      	lsrs	r4, r1
 8000c56:	4317      	orrs	r7, r2
 8000c58:	e9c6 7400 	strd	r7, r4, [r6]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	2100      	movs	r1, #0
 8000c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c64:	f1c3 0120 	rsb	r1, r3, #32
 8000c68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c70:	fa25 f101 	lsr.w	r1, r5, r1
 8000c74:	409d      	lsls	r5, r3
 8000c76:	432a      	orrs	r2, r5
 8000c78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7c:	fa1f fe8c 	uxth.w	lr, ip
 8000c80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c84:	fb07 1510 	mls	r5, r7, r0, r1
 8000c88:	0c11      	lsrs	r1, r2, #16
 8000c8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c92:	428d      	cmp	r5, r1
 8000c94:	fa04 f403 	lsl.w	r4, r4, r3
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x258>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ca2:	d22f      	bcs.n	8000d04 <__udivmoddi4+0x2b0>
 8000ca4:	428d      	cmp	r5, r1
 8000ca6:	d92d      	bls.n	8000d04 <__udivmoddi4+0x2b0>
 8000ca8:	3802      	subs	r0, #2
 8000caa:	4461      	add	r1, ip
 8000cac:	1b49      	subs	r1, r1, r5
 8000cae:	b292      	uxth	r2, r2
 8000cb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000cb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000cc0:	4291      	cmp	r1, r2
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x282>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ccc:	d216      	bcs.n	8000cfc <__udivmoddi4+0x2a8>
 8000cce:	4291      	cmp	r1, r2
 8000cd0:	d914      	bls.n	8000cfc <__udivmoddi4+0x2a8>
 8000cd2:	3d02      	subs	r5, #2
 8000cd4:	4462      	add	r2, ip
 8000cd6:	1a52      	subs	r2, r2, r1
 8000cd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cdc:	e738      	b.n	8000b50 <__udivmoddi4+0xfc>
 8000cde:	4631      	mov	r1, r6
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	e708      	b.n	8000af6 <__udivmoddi4+0xa2>
 8000ce4:	4639      	mov	r1, r7
 8000ce6:	e6e6      	b.n	8000ab6 <__udivmoddi4+0x62>
 8000ce8:	4610      	mov	r0, r2
 8000cea:	e6fb      	b.n	8000ae4 <__udivmoddi4+0x90>
 8000cec:	4548      	cmp	r0, r9
 8000cee:	d2a9      	bcs.n	8000c44 <__udivmoddi4+0x1f0>
 8000cf0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cf4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	e7a3      	b.n	8000c44 <__udivmoddi4+0x1f0>
 8000cfc:	4645      	mov	r5, r8
 8000cfe:	e7ea      	b.n	8000cd6 <__udivmoddi4+0x282>
 8000d00:	462b      	mov	r3, r5
 8000d02:	e794      	b.n	8000c2e <__udivmoddi4+0x1da>
 8000d04:	4640      	mov	r0, r8
 8000d06:	e7d1      	b.n	8000cac <__udivmoddi4+0x258>
 8000d08:	46d0      	mov	r8, sl
 8000d0a:	e77b      	b.n	8000c04 <__udivmoddi4+0x1b0>
 8000d0c:	3d02      	subs	r5, #2
 8000d0e:	4462      	add	r2, ip
 8000d10:	e732      	b.n	8000b78 <__udivmoddi4+0x124>
 8000d12:	4608      	mov	r0, r1
 8000d14:	e70a      	b.n	8000b2c <__udivmoddi4+0xd8>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	e742      	b.n	8000ba2 <__udivmoddi4+0x14e>

08000d1c <__aeabi_idiv0>:
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	4b36      	ldr	r3, [pc, #216]	; (8000e10 <MX_GPIO_Init+0xf0>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	4a35      	ldr	r2, [pc, #212]	; (8000e10 <MX_GPIO_Init+0xf0>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d42:	4b33      	ldr	r3, [pc, #204]	; (8000e10 <MX_GPIO_Init+0xf0>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d4e:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <MX_GPIO_Init+0xf0>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	4a2f      	ldr	r2, [pc, #188]	; (8000e10 <MX_GPIO_Init+0xf0>)
 8000d54:	f043 0320 	orr.w	r3, r3, #32
 8000d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <MX_GPIO_Init+0xf0>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5e:	f003 0320 	and.w	r3, r3, #32
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <MX_GPIO_Init+0xf0>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	4a29      	ldr	r2, [pc, #164]	; (8000e10 <MX_GPIO_Init+0xf0>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d72:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <MX_GPIO_Init+0xf0>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <MX_GPIO_Init+0xf0>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	4a23      	ldr	r2, [pc, #140]	; (8000e10 <MX_GPIO_Init+0xf0>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <MX_GPIO_Init+0xf0>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2120      	movs	r1, #32
 8000d9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9e:	f000 fea9 	bl	8001af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000da8:	481a      	ldr	r0, [pc, #104]	; (8000e14 <MX_GPIO_Init+0xf4>)
 8000daa:	f000 fea3 	bl	8001af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4814      	ldr	r0, [pc, #80]	; (8000e18 <MX_GPIO_Init+0xf8>)
 8000dc6:	f000 fd13 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dca:	2320      	movs	r3, #32
 8000dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f000 fd04 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000de8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4804      	ldr	r0, [pc, #16]	; (8000e14 <MX_GPIO_Init+0xf4>)
 8000e02:	f000 fcf5 	bl	80017f0 <HAL_GPIO_Init>

}
 8000e06:	bf00      	nop
 8000e08:	3728      	adds	r7, #40	; 0x28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000
 8000e14:	48000400 	.word	0x48000400
 8000e18:	48000800 	.word	0x48000800
 8000e1c:	00000000 	.word	0x00000000

08000e20 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e26:	f000 fb8e 	bl	8001546 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e2a:	f000 f8f1 	bl	8001010 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e2e:	f7ff ff77 	bl	8000d20 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 8000e32:	f000 fabd 	bl	80013b0 <MX_LPUART1_UART_Init>
	MX_TIM1_Init();
 8000e36:	f000 f99b 	bl	8001170 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	// Start PWM
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1); // U
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e40:	486d      	ldr	r0, [pc, #436]	; (8000ff8 <main+0x1d8>)
 8000e42:	f000 fe57 	bl	8001af4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1); // V
 8000e46:	2201      	movs	r2, #1
 8000e48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e4c:	486a      	ldr	r0, [pc, #424]	; (8000ff8 <main+0x1d8>)
 8000e4e:	f000 fe51 	bl	8001af4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // W
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e58:	4867      	ldr	r0, [pc, #412]	; (8000ff8 <main+0x1d8>)
 8000e5a:	f000 fe4b 	bl	8001af4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1); // EN_FAULT
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e64:	4864      	ldr	r0, [pc, #400]	; (8000ff8 <main+0x1d8>)
 8000e66:	f000 fe45 	bl	8001af4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4863      	ldr	r0, [pc, #396]	; (8000ffc <main+0x1dc>)
 8000e6e:	f001 fee9 	bl	8002c44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000e72:	2104      	movs	r1, #4
 8000e74:	4861      	ldr	r0, [pc, #388]	; (8000ffc <main+0x1dc>)
 8000e76:	f001 fee5 	bl	8002c44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000e7a:	2108      	movs	r1, #8
 8000e7c:	485f      	ldr	r0, [pc, #380]	; (8000ffc <main+0x1dc>)
 8000e7e:	f001 fee1 	bl	8002c44 <HAL_TIM_PWM_Start>

		/* USER CODE BEGIN 3 */
		// Update PWM


		uint16_t pwm_value1 = (uint16_t)((sin(phase) + 1.0) * 32767.5); // Canal 1
 8000e82:	4b5f      	ldr	r3, [pc, #380]	; (8001000 <main+0x1e0>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fc54 	bl	8000734 <__aeabi_f2d>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	ec43 2b10 	vmov	d0, r2, r3
 8000e94:	f003 fd50 	bl	8004938 <sin>
 8000e98:	ec51 0b10 	vmov	r0, r1, d0
 8000e9c:	f04f 0200 	mov.w	r2, #0
 8000ea0:	4b58      	ldr	r3, [pc, #352]	; (8001004 <main+0x1e4>)
 8000ea2:	f7ff fae9 	bl	8000478 <__adddf3>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	4610      	mov	r0, r2
 8000eac:	4619      	mov	r1, r3
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	4b55      	ldr	r3, [pc, #340]	; (8001008 <main+0x1e8>)
 8000eb4:	f7ff f9b0 	bl	8000218 <__aeabi_dmul>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f7ff fd40 	bl	8000944 <__aeabi_d2uiz>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	80fb      	strh	r3, [r7, #6]
		uint16_t pwm_value2 = (uint16_t)((sin(phase - (2 * M_PI / 3)) + 1.0) * 32767.5); // Canal 2
 8000ec8:	4b4d      	ldr	r3, [pc, #308]	; (8001000 <main+0x1e0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fc31 	bl	8000734 <__aeabi_f2d>
 8000ed2:	a345      	add	r3, pc, #276	; (adr r3, 8000fe8 <main+0x1c8>)
 8000ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed8:	f7ff facc 	bl	8000474 <__aeabi_dsub>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	ec43 2b17 	vmov	d7, r2, r3
 8000ee4:	eeb0 0a47 	vmov.f32	s0, s14
 8000ee8:	eef0 0a67 	vmov.f32	s1, s15
 8000eec:	f003 fd24 	bl	8004938 <sin>
 8000ef0:	ec51 0b10 	vmov	r0, r1, d0
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	4b42      	ldr	r3, [pc, #264]	; (8001004 <main+0x1e4>)
 8000efa:	f7ff fabd 	bl	8000478 <__adddf3>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	4610      	mov	r0, r2
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	4b3f      	ldr	r3, [pc, #252]	; (8001008 <main+0x1e8>)
 8000f0c:	f7ff f984 	bl	8000218 <__aeabi_dmul>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4610      	mov	r0, r2
 8000f16:	4619      	mov	r1, r3
 8000f18:	f7ff fd14 	bl	8000944 <__aeabi_d2uiz>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	80bb      	strh	r3, [r7, #4]
		uint16_t pwm_value3 = (uint16_t)((sin(phase + (2 * M_PI / 3)) + 1.0) * 32767.5); // Canal 3
 8000f20:	4b37      	ldr	r3, [pc, #220]	; (8001000 <main+0x1e0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fc05 	bl	8000734 <__aeabi_f2d>
 8000f2a:	a32f      	add	r3, pc, #188	; (adr r3, 8000fe8 <main+0x1c8>)
 8000f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f30:	f7ff faa2 	bl	8000478 <__adddf3>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	ec43 2b17 	vmov	d7, r2, r3
 8000f3c:	eeb0 0a47 	vmov.f32	s0, s14
 8000f40:	eef0 0a67 	vmov.f32	s1, s15
 8000f44:	f003 fcf8 	bl	8004938 <sin>
 8000f48:	ec51 0b10 	vmov	r0, r1, d0
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <main+0x1e4>)
 8000f52:	f7ff fa91 	bl	8000478 <__adddf3>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <main+0x1e8>)
 8000f64:	f7ff f958 	bl	8000218 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f7ff fce8 	bl	8000944 <__aeabi_d2uiz>
 8000f74:	4603      	mov	r3, r0
 8000f76:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_value1);
 8000f78:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <main+0x1dc>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	88fa      	ldrh	r2, [r7, #6]
 8000f7e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_value2);
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <main+0x1dc>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	88ba      	ldrh	r2, [r7, #4]
 8000f86:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_value3);
 8000f88:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <main+0x1dc>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	887a      	ldrh	r2, [r7, #2]
 8000f8e:	63da      	str	r2, [r3, #60]	; 0x3c

		phase += phase_increment;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <main+0x1e0>)
 8000f92:	ed93 7a00 	vldr	s14, [r3]
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <main+0x1ec>)
 8000f98:	edd3 7a00 	vldr	s15, [r3]
 8000f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <main+0x1e0>)
 8000fa2:	edc3 7a00 	vstr	s15, [r3]
		if (phase >= (2 * M_PI))
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <main+0x1e0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fbc2 	bl	8000734 <__aeabi_f2d>
 8000fb0:	a30f      	add	r3, pc, #60	; (adr r3, 8000ff0 <main+0x1d0>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	f7ff fc89 	bl	80008cc <__aeabi_dcmpge>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d012      	beq.n	8000fe6 <main+0x1c6>
		{
			phase -= (2 * M_PI);
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <main+0x1e0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fbb5 	bl	8000734 <__aeabi_f2d>
 8000fca:	a309      	add	r3, pc, #36	; (adr r3, 8000ff0 <main+0x1d0>)
 8000fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd0:	f7ff fa50 	bl	8000474 <__aeabi_dsub>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f7ff fcd2 	bl	8000984 <__aeabi_d2f>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4a07      	ldr	r2, [pc, #28]	; (8001000 <main+0x1e0>)
 8000fe4:	6013      	str	r3, [r2, #0]
	{
 8000fe6:	e74c      	b.n	8000e82 <main+0x62>
 8000fe8:	382d7365 	.word	0x382d7365
 8000fec:	4000c152 	.word	0x4000c152
 8000ff0:	54442d18 	.word	0x54442d18
 8000ff4:	401921fb 	.word	0x401921fb
 8000ff8:	48000400 	.word	0x48000400
 8000ffc:	20000030 	.word	0x20000030
 8001000:	2000002c 	.word	0x2000002c
 8001004:	3ff00000 	.word	0x3ff00000
 8001008:	40dfffe0 	.word	0x40dfffe0
 800100c:	20000000 	.word	0x20000000

08001010 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b094      	sub	sp, #80	; 0x50
 8001014:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001016:	f107 0318 	add.w	r3, r7, #24
 800101a:	2238      	movs	r2, #56	; 0x38
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f003 fc5c 	bl	80048dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001032:	2000      	movs	r0, #0
 8001034:	f000 fd76 	bl	8001b24 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001038:	2302      	movs	r3, #2
 800103a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800103c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001042:	2340      	movs	r3, #64	; 0x40
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001046:	2302      	movs	r3, #2
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800104a:	2302      	movs	r3, #2
 800104c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800104e:	2304      	movs	r3, #4
 8001050:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001052:	2355      	movs	r3, #85	; 0x55
 8001054:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001056:	2302      	movs	r3, #2
 8001058:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800105a:	2302      	movs	r3, #2
 800105c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800105e:	2302      	movs	r3, #2
 8001060:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001062:	f107 0318 	add.w	r3, r7, #24
 8001066:	4618      	mov	r0, r3
 8001068:	f000 fe10 	bl	8001c8c <HAL_RCC_OscConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001072:	f000 f818 	bl	80010a6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001076:	230f      	movs	r3, #15
 8001078:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107a:	2303      	movs	r3, #3
 800107c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2104      	movs	r1, #4
 800108e:	4618      	mov	r0, r3
 8001090:	f001 f914 	bl	80022bc <HAL_RCC_ClockConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0x8e>
	{
		Error_Handler();
 800109a:	f000 f804 	bl	80010a6 <Error_Handler>
	}
}
 800109e:	bf00      	nop
 80010a0:	3750      	adds	r7, #80	; 0x50
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010aa:	b672      	cpsid	i
}
 80010ac:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010ae:	e7fe      	b.n	80010ae <Error_Handler+0x8>

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_MspInit+0x44>)
 80010b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <HAL_MspInit+0x44>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6613      	str	r3, [r2, #96]	; 0x60
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <HAL_MspInit+0x44>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_MspInit+0x44>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_MspInit+0x44>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	6593      	str	r3, [r2, #88]	; 0x58
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_MspInit+0x44>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010e6:	f000 fdc1 	bl	8001c6c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <NMI_Handler+0x4>

080010fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <HardFault_Handler+0x4>

08001104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <MemManage_Handler+0x4>

0800110a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <UsageFault_Handler+0x4>

08001116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001144:	f000 fa52 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <SystemInit+0x20>)
 8001152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <SystemInit+0x20>)
 8001158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800115c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b09c      	sub	sp, #112	; 0x70
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001176:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001190:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
 80011a0:	615a      	str	r2, [r3, #20]
 80011a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2234      	movs	r2, #52	; 0x34
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 fb96 	bl	80048dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011b0:	4b51      	ldr	r3, [pc, #324]	; (80012f8 <MX_TIM1_Init+0x188>)
 80011b2:	4a52      	ldr	r2, [pc, #328]	; (80012fc <MX_TIM1_Init+0x18c>)
 80011b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 85;
 80011b6:	4b50      	ldr	r3, [pc, #320]	; (80012f8 <MX_TIM1_Init+0x188>)
 80011b8:	2255      	movs	r2, #85	; 0x55
 80011ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	4b4e      	ldr	r3, [pc, #312]	; (80012f8 <MX_TIM1_Init+0x188>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24999;
 80011c2:	4b4d      	ldr	r3, [pc, #308]	; (80012f8 <MX_TIM1_Init+0x188>)
 80011c4:	f246 12a7 	movw	r2, #24999	; 0x61a7
 80011c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ca:	4b4b      	ldr	r3, [pc, #300]	; (80012f8 <MX_TIM1_Init+0x188>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011d0:	4b49      	ldr	r3, [pc, #292]	; (80012f8 <MX_TIM1_Init+0x188>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d6:	4b48      	ldr	r3, [pc, #288]	; (80012f8 <MX_TIM1_Init+0x188>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011dc:	4846      	ldr	r0, [pc, #280]	; (80012f8 <MX_TIM1_Init+0x188>)
 80011de:	f001 fc79 	bl	8002ad4 <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011e8:	f7ff ff5d 	bl	80010a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011f6:	4619      	mov	r1, r3
 80011f8:	483f      	ldr	r0, [pc, #252]	; (80012f8 <MX_TIM1_Init+0x188>)
 80011fa:	f001 ff37 	bl	800306c <HAL_TIM_ConfigClockSource>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001204:	f7ff ff4f 	bl	80010a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001208:	483b      	ldr	r0, [pc, #236]	; (80012f8 <MX_TIM1_Init+0x188>)
 800120a:	f001 fcba 	bl	8002b82 <HAL_TIM_PWM_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001214:	f7ff ff47 	bl	80010a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001224:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001228:	4619      	mov	r1, r3
 800122a:	4833      	ldr	r0, [pc, #204]	; (80012f8 <MX_TIM1_Init+0x188>)
 800122c:	f002 fc60 	bl	8003af0 <HAL_TIMEx_MasterConfigSynchronization>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001236:	f7ff ff36 	bl	80010a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800123a:	2360      	movs	r3, #96	; 0x60
 800123c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001242:	2300      	movs	r3, #0
 8001244:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001246:	2300      	movs	r3, #0
 8001248:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001256:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800125a:	2200      	movs	r2, #0
 800125c:	4619      	mov	r1, r3
 800125e:	4826      	ldr	r0, [pc, #152]	; (80012f8 <MX_TIM1_Init+0x188>)
 8001260:	f001 fdf0 	bl	8002e44 <HAL_TIM_PWM_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800126a:	f7ff ff1c 	bl	80010a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800126e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001272:	2204      	movs	r2, #4
 8001274:	4619      	mov	r1, r3
 8001276:	4820      	ldr	r0, [pc, #128]	; (80012f8 <MX_TIM1_Init+0x188>)
 8001278:	f001 fde4 	bl	8002e44 <HAL_TIM_PWM_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001282:	f7ff ff10 	bl	80010a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001286:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800128a:	2208      	movs	r2, #8
 800128c:	4619      	mov	r1, r3
 800128e:	481a      	ldr	r0, [pc, #104]	; (80012f8 <MX_TIM1_Init+0x188>)
 8001290:	f001 fdd8 	bl	8002e44 <HAL_TIM_PWM_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800129a:	f7ff ff04 	bl	80010a6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80012ce:	2300      	movs	r3, #0
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	4807      	ldr	r0, [pc, #28]	; (80012f8 <MX_TIM1_Init+0x188>)
 80012dc:	f002 fc8a 	bl	8003bf4 <HAL_TIMEx_ConfigBreakDeadTime>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80012e6:	f7ff fede 	bl	80010a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012ea:	4803      	ldr	r0, [pc, #12]	; (80012f8 <MX_TIM1_Init+0x188>)
 80012ec:	f000 f828 	bl	8001340 <HAL_TIM_MspPostInit>

}
 80012f0:	bf00      	nop
 80012f2:	3770      	adds	r7, #112	; 0x70
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000030 	.word	0x20000030
 80012fc:	40012c00 	.word	0x40012c00

08001300 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <HAL_TIM_Base_MspInit+0x38>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d10b      	bne.n	800132a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <HAL_TIM_Base_MspInit+0x3c>)
 8001314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001316:	4a09      	ldr	r2, [pc, #36]	; (800133c <HAL_TIM_Base_MspInit+0x3c>)
 8001318:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800131c:	6613      	str	r3, [r2, #96]	; 0x60
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <HAL_TIM_Base_MspInit+0x3c>)
 8001320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40012c00 	.word	0x40012c00
 800133c:	40021000 	.word	0x40021000

08001340 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <HAL_TIM_MspPostInit+0x68>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d11d      	bne.n	800139e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_TIM_MspPostInit+0x6c>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	4a11      	ldr	r2, [pc, #68]	; (80013ac <HAL_TIM_MspPostInit+0x6c>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <HAL_TIM_MspPostInit+0x6c>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800137a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800137e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800138c:	2306      	movs	r3, #6
 800138e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	4619      	mov	r1, r3
 8001396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139a:	f000 fa29 	bl	80017f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800139e:	bf00      	nop
 80013a0:	3720      	adds	r7, #32
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40012c00 	.word	0x40012c00
 80013ac:	40021000 	.word	0x40021000

080013b0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80013b4:	4b21      	ldr	r3, [pc, #132]	; (800143c <MX_LPUART1_UART_Init+0x8c>)
 80013b6:	4a22      	ldr	r2, [pc, #136]	; (8001440 <MX_LPUART1_UART_Init+0x90>)
 80013b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <MX_LPUART1_UART_Init+0x8c>)
 80013bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <MX_LPUART1_UART_Init+0x8c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <MX_LPUART1_UART_Init+0x8c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_LPUART1_UART_Init+0x8c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <MX_LPUART1_UART_Init+0x8c>)
 80013d6:	220c      	movs	r2, #12
 80013d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_LPUART1_UART_Init+0x8c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_LPUART1_UART_Init+0x8c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <MX_LPUART1_UART_Init+0x8c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_LPUART1_UART_Init+0x8c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80013f2:	4812      	ldr	r0, [pc, #72]	; (800143c <MX_LPUART1_UART_Init+0x8c>)
 80013f4:	f002 fc9e 	bl	8003d34 <HAL_UART_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80013fe:	f7ff fe52 	bl	80010a6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001402:	2100      	movs	r1, #0
 8001404:	480d      	ldr	r0, [pc, #52]	; (800143c <MX_LPUART1_UART_Init+0x8c>)
 8001406:	f003 f99f 	bl	8004748 <HAL_UARTEx_SetTxFifoThreshold>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001410:	f7ff fe49 	bl	80010a6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001414:	2100      	movs	r1, #0
 8001416:	4809      	ldr	r0, [pc, #36]	; (800143c <MX_LPUART1_UART_Init+0x8c>)
 8001418:	f003 f9d4 	bl	80047c4 <HAL_UARTEx_SetRxFifoThreshold>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001422:	f7ff fe40 	bl	80010a6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_LPUART1_UART_Init+0x8c>)
 8001428:	f003 f955 	bl	80046d6 <HAL_UARTEx_DisableFifoMode>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001432:	f7ff fe38 	bl	80010a6 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000007c 	.word	0x2000007c
 8001440:	40008000 	.word	0x40008000

08001444 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b09a      	sub	sp, #104	; 0x68
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	2244      	movs	r2, #68	; 0x44
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f003 fa39 	bl	80048dc <memset>
  if(uartHandle->Instance==LPUART1)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a1f      	ldr	r2, [pc, #124]	; (80014ec <HAL_UART_MspInit+0xa8>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d136      	bne.n	80014e2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001474:	2320      	movs	r3, #32
 8001476:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	4618      	mov	r0, r3
 8001482:	f001 f937 	bl	80026f4 <HAL_RCCEx_PeriphCLKConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800148c:	f7ff fe0b 	bl	80010a6 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001490:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <HAL_UART_MspInit+0xac>)
 8001492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001494:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <HAL_UART_MspInit+0xac>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_UART_MspInit+0xac>)
 800149e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <HAL_UART_MspInit+0xac>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	4a10      	ldr	r2, [pc, #64]	; (80014f0 <HAL_UART_MspInit+0xac>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <HAL_UART_MspInit+0xac>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80014c0:	230c      	movs	r3, #12
 80014c2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80014d0:	230c      	movs	r3, #12
 80014d2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014d8:	4619      	mov	r1, r3
 80014da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014de:	f000 f987 	bl	80017f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80014e2:	bf00      	nop
 80014e4:	3768      	adds	r7, #104	; 0x68
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40008000 	.word	0x40008000
 80014f0:	40021000 	.word	0x40021000

080014f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f8:	480d      	ldr	r0, [pc, #52]	; (8001530 <LoopForever+0x6>)
  ldr r1, =_edata
 80014fa:	490e      	ldr	r1, [pc, #56]	; (8001534 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014fc:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <LoopForever+0xe>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001510:	4c0b      	ldr	r4, [pc, #44]	; (8001540 <LoopForever+0x16>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800151e:	f7ff fe15 	bl	800114c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001522:	f003 f9e3 	bl	80048ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001526:	f7ff fc7b 	bl	8000e20 <main>

0800152a <LoopForever>:

LoopForever:
    b LoopForever
 800152a:	e7fe      	b.n	800152a <LoopForever>
  ldr   r0, =_estack
 800152c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001538:	08005bf8 	.word	0x08005bf8
  ldr r2, =_sbss
 800153c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001540:	20000110 	.word	0x20000110

08001544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC1_2_IRQHandler>

08001546 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 f91b 	bl	800178c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f80e 	bl	8001578 <HAL_InitTick>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d002      	beq.n	8001568 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	71fb      	strb	r3, [r7, #7]
 8001566:	e001      	b.n	800156c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001568:	f7ff fda2 	bl	80010b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800156c:	79fb      	ldrb	r3, [r7, #7]

}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <HAL_InitTick+0x68>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d022      	beq.n	80015d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_InitTick+0x6c>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <HAL_InitTick+0x68>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001598:	fbb1 f3f3 	udiv	r3, r1, r3
 800159c:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 f918 	bl	80017d6 <HAL_SYSTICK_Config>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10f      	bne.n	80015cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b0f      	cmp	r3, #15
 80015b0:	d809      	bhi.n	80015c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b2:	2200      	movs	r2, #0
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	f04f 30ff 	mov.w	r0, #4294967295
 80015ba:	f000 f8f2 	bl	80017a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_InitTick+0x70>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	e007      	b.n	80015d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	73fb      	strb	r3, [r7, #15]
 80015ca:	e004      	b.n	80015d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e001      	b.n	80015d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2000000c 	.word	0x2000000c
 80015e4:	20000004 	.word	0x20000004
 80015e8:	20000008 	.word	0x20000008

080015ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_IncTick+0x1c>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_IncTick+0x20>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4413      	add	r3, r2
 80015fa:	4a03      	ldr	r2, [pc, #12]	; (8001608 <HAL_IncTick+0x1c>)
 80015fc:	6013      	str	r3, [r2, #0]
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	2000010c 	.word	0x2000010c
 800160c:	2000000c 	.word	0x2000000c

08001610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_GetTick+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	2000010c 	.word	0x2000010c

08001628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <__NVIC_SetPriorityGrouping+0x44>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001644:	4013      	ands	r3, r2
 8001646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165a:	4a04      	ldr	r2, [pc, #16]	; (800166c <__NVIC_SetPriorityGrouping+0x44>)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	60d3      	str	r3, [r2, #12]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <__NVIC_GetPriorityGrouping+0x18>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	f003 0307 	and.w	r3, r3, #7
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	6039      	str	r1, [r7, #0]
 8001696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169c:	2b00      	cmp	r3, #0
 800169e:	db0a      	blt.n	80016b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	490c      	ldr	r1, [pc, #48]	; (80016d8 <__NVIC_SetPriority+0x4c>)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	0112      	lsls	r2, r2, #4
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	440b      	add	r3, r1
 80016b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b4:	e00a      	b.n	80016cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4908      	ldr	r1, [pc, #32]	; (80016dc <__NVIC_SetPriority+0x50>)
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	3b04      	subs	r3, #4
 80016c4:	0112      	lsls	r2, r2, #4
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	440b      	add	r3, r1
 80016ca:	761a      	strb	r2, [r3, #24]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000e100 	.word	0xe000e100
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	; 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f1c3 0307 	rsb	r3, r3, #7
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	bf28      	it	cs
 80016fe:	2304      	movcs	r3, #4
 8001700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3304      	adds	r3, #4
 8001706:	2b06      	cmp	r3, #6
 8001708:	d902      	bls.n	8001710 <NVIC_EncodePriority+0x30>
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3b03      	subs	r3, #3
 800170e:	e000      	b.n	8001712 <NVIC_EncodePriority+0x32>
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	f04f 32ff 	mov.w	r2, #4294967295
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43da      	mvns	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	401a      	ands	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001728:	f04f 31ff 	mov.w	r1, #4294967295
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	43d9      	mvns	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	4313      	orrs	r3, r2
         );
}
 800173a:	4618      	mov	r0, r3
 800173c:	3724      	adds	r7, #36	; 0x24
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001758:	d301      	bcc.n	800175e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175a:	2301      	movs	r3, #1
 800175c:	e00f      	b.n	800177e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <SysTick_Config+0x40>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001766:	210f      	movs	r1, #15
 8001768:	f04f 30ff 	mov.w	r0, #4294967295
 800176c:	f7ff ff8e 	bl	800168c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <SysTick_Config+0x40>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <SysTick_Config+0x40>)
 8001778:	2207      	movs	r2, #7
 800177a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	e000e010 	.word	0xe000e010

0800178c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ff47 	bl	8001628 <__NVIC_SetPriorityGrouping>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
 80017ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017b0:	f7ff ff5e 	bl	8001670 <__NVIC_GetPriorityGrouping>
 80017b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	6978      	ldr	r0, [r7, #20]
 80017bc:	f7ff ff90 	bl	80016e0 <NVIC_EncodePriority>
 80017c0:	4602      	mov	r2, r0
 80017c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff5f 	bl	800168c <__NVIC_SetPriority>
}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffb2 	bl	8001748 <SysTick_Config>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017fe:	e15a      	b.n	8001ab6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	2101      	movs	r1, #1
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 814c 	beq.w	8001ab0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b01      	cmp	r3, #1
 8001822:	d005      	beq.n	8001830 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800182c:	2b02      	cmp	r3, #2
 800182e:	d130      	bne.n	8001892 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001866:	2201      	movs	r2, #1
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	f003 0201 	and.w	r2, r3, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b03      	cmp	r3, #3
 800189c:	d017      	beq.n	80018ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2203      	movs	r2, #3
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d123      	bne.n	8001922 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	08da      	lsrs	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3208      	adds	r2, #8
 80018e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	220f      	movs	r2, #15
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	691a      	ldr	r2, [r3, #16]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	08da      	lsrs	r2, r3, #3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3208      	adds	r2, #8
 800191c:	6939      	ldr	r1, [r7, #16]
 800191e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0203 	and.w	r2, r3, #3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 80a6 	beq.w	8001ab0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001964:	4b5b      	ldr	r3, [pc, #364]	; (8001ad4 <HAL_GPIO_Init+0x2e4>)
 8001966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001968:	4a5a      	ldr	r2, [pc, #360]	; (8001ad4 <HAL_GPIO_Init+0x2e4>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6613      	str	r3, [r2, #96]	; 0x60
 8001970:	4b58      	ldr	r3, [pc, #352]	; (8001ad4 <HAL_GPIO_Init+0x2e4>)
 8001972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197c:	4a56      	ldr	r2, [pc, #344]	; (8001ad8 <HAL_GPIO_Init+0x2e8>)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	3302      	adds	r3, #2
 8001984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019a6:	d01f      	beq.n	80019e8 <HAL_GPIO_Init+0x1f8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a4c      	ldr	r2, [pc, #304]	; (8001adc <HAL_GPIO_Init+0x2ec>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d019      	beq.n	80019e4 <HAL_GPIO_Init+0x1f4>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a4b      	ldr	r2, [pc, #300]	; (8001ae0 <HAL_GPIO_Init+0x2f0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d013      	beq.n	80019e0 <HAL_GPIO_Init+0x1f0>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a4a      	ldr	r2, [pc, #296]	; (8001ae4 <HAL_GPIO_Init+0x2f4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d00d      	beq.n	80019dc <HAL_GPIO_Init+0x1ec>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a49      	ldr	r2, [pc, #292]	; (8001ae8 <HAL_GPIO_Init+0x2f8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d007      	beq.n	80019d8 <HAL_GPIO_Init+0x1e8>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a48      	ldr	r2, [pc, #288]	; (8001aec <HAL_GPIO_Init+0x2fc>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d101      	bne.n	80019d4 <HAL_GPIO_Init+0x1e4>
 80019d0:	2305      	movs	r3, #5
 80019d2:	e00a      	b.n	80019ea <HAL_GPIO_Init+0x1fa>
 80019d4:	2306      	movs	r3, #6
 80019d6:	e008      	b.n	80019ea <HAL_GPIO_Init+0x1fa>
 80019d8:	2304      	movs	r3, #4
 80019da:	e006      	b.n	80019ea <HAL_GPIO_Init+0x1fa>
 80019dc:	2303      	movs	r3, #3
 80019de:	e004      	b.n	80019ea <HAL_GPIO_Init+0x1fa>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e002      	b.n	80019ea <HAL_GPIO_Init+0x1fa>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <HAL_GPIO_Init+0x1fa>
 80019e8:	2300      	movs	r3, #0
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	f002 0203 	and.w	r2, r2, #3
 80019f0:	0092      	lsls	r2, r2, #2
 80019f2:	4093      	lsls	r3, r2
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019fa:	4937      	ldr	r1, [pc, #220]	; (8001ad8 <HAL_GPIO_Init+0x2e8>)
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	089b      	lsrs	r3, r3, #2
 8001a00:	3302      	adds	r3, #2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a08:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <HAL_GPIO_Init+0x300>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a2c:	4a30      	ldr	r2, [pc, #192]	; (8001af0 <HAL_GPIO_Init+0x300>)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a32:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <HAL_GPIO_Init+0x300>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a56:	4a26      	ldr	r2, [pc, #152]	; (8001af0 <HAL_GPIO_Init+0x300>)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a5c:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_GPIO_Init+0x300>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a80:	4a1b      	ldr	r2, [pc, #108]	; (8001af0 <HAL_GPIO_Init+0x300>)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_GPIO_Init+0x300>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aaa:	4a11      	ldr	r2, [pc, #68]	; (8001af0 <HAL_GPIO_Init+0x300>)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f47f ae9d 	bne.w	8001800 <HAL_GPIO_Init+0x10>
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	bf00      	nop
 8001aca:	371c      	adds	r7, #28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40010000 	.word	0x40010000
 8001adc:	48000400 	.word	0x48000400
 8001ae0:	48000800 	.word	0x48000800
 8001ae4:	48000c00 	.word	0x48000c00
 8001ae8:	48001000 	.word	0x48001000
 8001aec:	48001400 	.word	0x48001400
 8001af0:	40010400 	.word	0x40010400

08001af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
 8001b00:	4613      	mov	r3, r2
 8001b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b04:	787b      	ldrb	r3, [r7, #1]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b0a:	887a      	ldrh	r2, [r7, #2]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d141      	bne.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b32:	4b4b      	ldr	r3, [pc, #300]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b3e:	d131      	bne.n	8001ba4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b40:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b46:	4a46      	ldr	r2, [pc, #280]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b50:	4b43      	ldr	r3, [pc, #268]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b58:	4a41      	ldr	r2, [pc, #260]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b60:	4b40      	ldr	r3, [pc, #256]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2232      	movs	r2, #50	; 0x32
 8001b66:	fb02 f303 	mul.w	r3, r2, r3
 8001b6a:	4a3f      	ldr	r2, [pc, #252]	; (8001c68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b70:	0c9b      	lsrs	r3, r3, #18
 8001b72:	3301      	adds	r3, #1
 8001b74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b76:	e002      	b.n	8001b7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b7e:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b8a:	d102      	bne.n	8001b92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f2      	bne.n	8001b78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b92:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b9e:	d158      	bne.n	8001c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e057      	b.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001baa:	4a2d      	ldr	r2, [pc, #180]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001bb4:	e04d      	b.n	8001c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bbc:	d141      	bne.n	8001c42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bbe:	4b28      	ldr	r3, [pc, #160]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bca:	d131      	bne.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bcc:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bd2:	4a23      	ldr	r2, [pc, #140]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bdc:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001be4:	4a1e      	ldr	r2, [pc, #120]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bec:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2232      	movs	r2, #50	; 0x32
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfc:	0c9b      	lsrs	r3, r3, #18
 8001bfe:	3301      	adds	r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c02:	e002      	b.n	8001c0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c16:	d102      	bne.n	8001c1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f2      	bne.n	8001c04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c2a:	d112      	bne.n	8001c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e011      	b.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c40:	e007      	b.n	8001c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c50:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	40007000 	.word	0x40007000
 8001c64:	20000004 	.word	0x20000004
 8001c68:	431bde83 	.word	0x431bde83

08001c6c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c7a:	6093      	str	r3, [r2, #8]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40007000 	.word	0x40007000

08001c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e306      	b.n	80022ac <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d075      	beq.n	8001d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001caa:	4b97      	ldr	r3, [pc, #604]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb4:	4b94      	ldr	r3, [pc, #592]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b0c      	cmp	r3, #12
 8001cc2:	d102      	bne.n	8001cca <HAL_RCC_OscConfig+0x3e>
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d002      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x44>
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d10b      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	4b8d      	ldr	r3, [pc, #564]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d05b      	beq.n	8001d94 <HAL_RCC_OscConfig+0x108>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d157      	bne.n	8001d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e2e1      	b.n	80022ac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf0:	d106      	bne.n	8001d00 <HAL_RCC_OscConfig+0x74>
 8001cf2:	4b85      	ldr	r3, [pc, #532]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a84      	ldr	r2, [pc, #528]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e01d      	b.n	8001d3c <HAL_RCC_OscConfig+0xb0>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x98>
 8001d0a:	4b7f      	ldr	r3, [pc, #508]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a7e      	ldr	r2, [pc, #504]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b7c      	ldr	r3, [pc, #496]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a7b      	ldr	r2, [pc, #492]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e00b      	b.n	8001d3c <HAL_RCC_OscConfig+0xb0>
 8001d24:	4b78      	ldr	r3, [pc, #480]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a77      	ldr	r2, [pc, #476]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b75      	ldr	r3, [pc, #468]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a74      	ldr	r2, [pc, #464]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d013      	beq.n	8001d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7ff fc64 	bl	8001610 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fc60 	bl	8001610 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e2a6      	b.n	80022ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d5e:	4b6a      	ldr	r3, [pc, #424]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0xc0>
 8001d6a:	e014      	b.n	8001d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fc50 	bl	8001610 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d74:	f7ff fc4c 	bl	8001610 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e292      	b.n	80022ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d86:	4b60      	ldr	r3, [pc, #384]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0xe8>
 8001d92:	e000      	b.n	8001d96 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d075      	beq.n	8001e8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da2:	4b59      	ldr	r3, [pc, #356]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dac:	4b56      	ldr	r3, [pc, #344]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	2b0c      	cmp	r3, #12
 8001dba:	d102      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x136>
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d002      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x13c>
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d11f      	bne.n	8001e08 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc8:	4b4f      	ldr	r3, [pc, #316]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_OscConfig+0x154>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e265      	b.n	80022ac <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de0:	4b49      	ldr	r3, [pc, #292]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	061b      	lsls	r3, r3, #24
 8001dee:	4946      	ldr	r1, [pc, #280]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001df4:	4b45      	ldr	r3, [pc, #276]	; (8001f0c <HAL_RCC_OscConfig+0x280>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fbbd 	bl	8001578 <HAL_InitTick>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d043      	beq.n	8001e8c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e251      	b.n	80022ac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d023      	beq.n	8001e58 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e10:	4b3d      	ldr	r3, [pc, #244]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a3c      	ldr	r2, [pc, #240]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fbf8 	bl	8001610 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e24:	f7ff fbf4 	bl	8001610 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e23a      	b.n	80022ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e36:	4b34      	ldr	r3, [pc, #208]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e42:	4b31      	ldr	r3, [pc, #196]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	061b      	lsls	r3, r3, #24
 8001e50:	492d      	ldr	r1, [pc, #180]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	604b      	str	r3, [r1, #4]
 8001e56:	e01a      	b.n	8001e8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e58:	4b2b      	ldr	r3, [pc, #172]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a2a      	ldr	r2, [pc, #168]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001e5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7ff fbd4 	bl	8001610 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6c:	f7ff fbd0 	bl	8001610 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e216      	b.n	80022ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e7e:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x1e0>
 8001e8a:	e000      	b.n	8001e8e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d041      	beq.n	8001f1e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d01c      	beq.n	8001edc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ea2:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea8:	4a17      	ldr	r2, [pc, #92]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb2:	f7ff fbad 	bl	8001610 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eba:	f7ff fba9 	bl	8001610 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e1ef      	b.n	80022ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0ef      	beq.n	8001eba <HAL_RCC_OscConfig+0x22e>
 8001eda:	e020      	b.n	8001f1e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001ee4:	f023 0301 	bic.w	r3, r3, #1
 8001ee8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eec:	f7ff fb90 	bl	8001610 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ef2:	e00d      	b.n	8001f10 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef4:	f7ff fb8c 	bl	8001610 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d906      	bls.n	8001f10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e1d2      	b.n	80022ac <HAL_RCC_OscConfig+0x620>
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f10:	4b8c      	ldr	r3, [pc, #560]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 8001f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1ea      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80a6 	beq.w	8002078 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f30:	4b84      	ldr	r3, [pc, #528]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_OscConfig+0x2b4>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <HAL_RCC_OscConfig+0x2b6>
 8001f40:	2300      	movs	r3, #0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00d      	beq.n	8001f62 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	4b7f      	ldr	r3, [pc, #508]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	4a7e      	ldr	r2, [pc, #504]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f50:	6593      	str	r3, [r2, #88]	; 0x58
 8001f52:	4b7c      	ldr	r3, [pc, #496]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f62:	4b79      	ldr	r3, [pc, #484]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d118      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f6e:	4b76      	ldr	r3, [pc, #472]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a75      	ldr	r2, [pc, #468]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7a:	f7ff fb49 	bl	8001610 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f82:	f7ff fb45 	bl	8001610 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e18b      	b.n	80022ac <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f94:	4b6c      	ldr	r3, [pc, #432]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d108      	bne.n	8001fba <HAL_RCC_OscConfig+0x32e>
 8001fa8:	4b66      	ldr	r3, [pc, #408]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	4a65      	ldr	r2, [pc, #404]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb8:	e024      	b.n	8002004 <HAL_RCC_OscConfig+0x378>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d110      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x358>
 8001fc2:	4b60      	ldr	r3, [pc, #384]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 8001fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc8:	4a5e      	ldr	r2, [pc, #376]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 8001fca:	f043 0304 	orr.w	r3, r3, #4
 8001fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fd2:	4b5c      	ldr	r3, [pc, #368]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 8001fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd8:	4a5a      	ldr	r2, [pc, #360]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fe2:	e00f      	b.n	8002004 <HAL_RCC_OscConfig+0x378>
 8001fe4:	4b57      	ldr	r3, [pc, #348]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 8001fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fea:	4a56      	ldr	r2, [pc, #344]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ff4:	4b53      	ldr	r3, [pc, #332]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffa:	4a52      	ldr	r2, [pc, #328]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 8001ffc:	f023 0304 	bic.w	r3, r3, #4
 8002000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d016      	beq.n	800203a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200c:	f7ff fb00 	bl	8001610 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002012:	e00a      	b.n	800202a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002014:	f7ff fafc 	bl	8001610 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e140      	b.n	80022ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800202a:	4b46      	ldr	r3, [pc, #280]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 800202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0ed      	beq.n	8002014 <HAL_RCC_OscConfig+0x388>
 8002038:	e015      	b.n	8002066 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203a:	f7ff fae9 	bl	8001610 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7ff fae5 	bl	8001610 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e129      	b.n	80022ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002058:	4b3a      	ldr	r3, [pc, #232]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 800205a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1ed      	bne.n	8002042 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002066:	7ffb      	ldrb	r3, [r7, #31]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d105      	bne.n	8002078 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206c:	4b35      	ldr	r3, [pc, #212]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	4a34      	ldr	r2, [pc, #208]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 8002072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002076:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	2b00      	cmp	r3, #0
 8002082:	d03c      	beq.n	80020fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01c      	beq.n	80020c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800208c:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 800208e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002092:	4a2c      	ldr	r2, [pc, #176]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7ff fab8 	bl	8001610 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020a4:	f7ff fab4 	bl	8001610 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e0fa      	b.n	80022ac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020b6:	4b23      	ldr	r3, [pc, #140]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 80020b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0ef      	beq.n	80020a4 <HAL_RCC_OscConfig+0x418>
 80020c4:	e01b      	b.n	80020fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020c6:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 80020c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020cc:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 80020ce:	f023 0301 	bic.w	r3, r3, #1
 80020d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d6:	f7ff fa9b 	bl	8001610 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020de:	f7ff fa97 	bl	8001610 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e0dd      	b.n	80022ac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 80020f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1ef      	bne.n	80020de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 80d1 	beq.w	80022aa <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	2b0c      	cmp	r3, #12
 8002112:	f000 808b 	beq.w	800222c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d15e      	bne.n	80021dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a08      	ldr	r2, [pc, #32]	; (8002144 <HAL_RCC_OscConfig+0x4b8>)
 8002124:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212a:	f7ff fa71 	bl	8001610 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002130:	e00c      	b.n	800214c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002132:	f7ff fa6d 	bl	8001610 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d905      	bls.n	800214c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e0b3      	b.n	80022ac <HAL_RCC_OscConfig+0x620>
 8002144:	40021000 	.word	0x40021000
 8002148:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800214c:	4b59      	ldr	r3, [pc, #356]	; (80022b4 <HAL_RCC_OscConfig+0x628>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1ec      	bne.n	8002132 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002158:	4b56      	ldr	r3, [pc, #344]	; (80022b4 <HAL_RCC_OscConfig+0x628>)
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	4b56      	ldr	r3, [pc, #344]	; (80022b8 <HAL_RCC_OscConfig+0x62c>)
 800215e:	4013      	ands	r3, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6a11      	ldr	r1, [r2, #32]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002168:	3a01      	subs	r2, #1
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	4311      	orrs	r1, r2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002172:	0212      	lsls	r2, r2, #8
 8002174:	4311      	orrs	r1, r2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800217a:	0852      	lsrs	r2, r2, #1
 800217c:	3a01      	subs	r2, #1
 800217e:	0552      	lsls	r2, r2, #21
 8002180:	4311      	orrs	r1, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002186:	0852      	lsrs	r2, r2, #1
 8002188:	3a01      	subs	r2, #1
 800218a:	0652      	lsls	r2, r2, #25
 800218c:	4311      	orrs	r1, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002192:	06d2      	lsls	r2, r2, #27
 8002194:	430a      	orrs	r2, r1
 8002196:	4947      	ldr	r1, [pc, #284]	; (80022b4 <HAL_RCC_OscConfig+0x628>)
 8002198:	4313      	orrs	r3, r2
 800219a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800219c:	4b45      	ldr	r3, [pc, #276]	; (80022b4 <HAL_RCC_OscConfig+0x628>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a44      	ldr	r2, [pc, #272]	; (80022b4 <HAL_RCC_OscConfig+0x628>)
 80021a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021a8:	4b42      	ldr	r3, [pc, #264]	; (80022b4 <HAL_RCC_OscConfig+0x628>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4a41      	ldr	r2, [pc, #260]	; (80022b4 <HAL_RCC_OscConfig+0x628>)
 80021ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff fa2c 	bl	8001610 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021bc:	f7ff fa28 	bl	8001610 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e06e      	b.n	80022ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ce:	4b39      	ldr	r3, [pc, #228]	; (80022b4 <HAL_RCC_OscConfig+0x628>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x530>
 80021da:	e066      	b.n	80022aa <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021dc:	4b35      	ldr	r3, [pc, #212]	; (80022b4 <HAL_RCC_OscConfig+0x628>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a34      	ldr	r2, [pc, #208]	; (80022b4 <HAL_RCC_OscConfig+0x628>)
 80021e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021e8:	4b32      	ldr	r3, [pc, #200]	; (80022b4 <HAL_RCC_OscConfig+0x628>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4a31      	ldr	r2, [pc, #196]	; (80022b4 <HAL_RCC_OscConfig+0x628>)
 80021ee:	f023 0303 	bic.w	r3, r3, #3
 80021f2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80021f4:	4b2f      	ldr	r3, [pc, #188]	; (80022b4 <HAL_RCC_OscConfig+0x628>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4a2e      	ldr	r2, [pc, #184]	; (80022b4 <HAL_RCC_OscConfig+0x628>)
 80021fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002202:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7ff fa04 	bl	8001610 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220c:	f7ff fa00 	bl	8001610 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e046      	b.n	80022ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800221e:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <HAL_RCC_OscConfig+0x628>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x580>
 800222a:	e03e      	b.n	80022aa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e039      	b.n	80022ac <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002238:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <HAL_RCC_OscConfig+0x628>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f003 0203 	and.w	r2, r3, #3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	429a      	cmp	r2, r3
 800224a:	d12c      	bne.n	80022a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	3b01      	subs	r3, #1
 8002258:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225a:	429a      	cmp	r2, r3
 800225c:	d123      	bne.n	80022a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800226a:	429a      	cmp	r2, r3
 800226c:	d11b      	bne.n	80022a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d113      	bne.n	80022a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	085b      	lsrs	r3, r3, #1
 800228a:	3b01      	subs	r3, #1
 800228c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d109      	bne.n	80022a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229c:	085b      	lsrs	r3, r3, #1
 800229e:	3b01      	subs	r3, #1
 80022a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3720      	adds	r7, #32
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000
 80022b8:	019f800c 	.word	0x019f800c

080022bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e11e      	b.n	8002512 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d4:	4b91      	ldr	r3, [pc, #580]	; (800251c <HAL_RCC_ClockConfig+0x260>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d910      	bls.n	8002304 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b8e      	ldr	r3, [pc, #568]	; (800251c <HAL_RCC_ClockConfig+0x260>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 020f 	bic.w	r2, r3, #15
 80022ea:	498c      	ldr	r1, [pc, #560]	; (800251c <HAL_RCC_ClockConfig+0x260>)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b8a      	ldr	r3, [pc, #552]	; (800251c <HAL_RCC_ClockConfig+0x260>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e106      	b.n	8002512 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d073      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d129      	bne.n	800236c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002318:	4b81      	ldr	r3, [pc, #516]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0f4      	b.n	8002512 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002328:	f000 f99e 	bl	8002668 <RCC_GetSysClockFreqFromPLLSource>
 800232c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4a7c      	ldr	r2, [pc, #496]	; (8002524 <HAL_RCC_ClockConfig+0x268>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d93f      	bls.n	80023b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002336:	4b7a      	ldr	r3, [pc, #488]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800234a:	2b00      	cmp	r3, #0
 800234c:	d033      	beq.n	80023b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002352:	2b00      	cmp	r3, #0
 8002354:	d12f      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002356:	4b72      	ldr	r3, [pc, #456]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800235e:	4a70      	ldr	r2, [pc, #448]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002364:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	e024      	b.n	80023b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d107      	bne.n	8002384 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002374:	4b6a      	ldr	r3, [pc, #424]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0c6      	b.n	8002512 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002384:	4b66      	ldr	r3, [pc, #408]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0be      	b.n	8002512 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002394:	f000 f8ce 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8002398:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4a61      	ldr	r2, [pc, #388]	; (8002524 <HAL_RCC_ClockConfig+0x268>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d909      	bls.n	80023b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023a2:	4b5f      	ldr	r3, [pc, #380]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023aa:	4a5d      	ldr	r2, [pc, #372]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 80023ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023b6:	4b5a      	ldr	r3, [pc, #360]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f023 0203 	bic.w	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4957      	ldr	r1, [pc, #348]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c8:	f7ff f922 	bl	8001610 <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d0:	f7ff f91e 	bl	8001610 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	; 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e095      	b.n	8002512 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	4b4e      	ldr	r3, [pc, #312]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 020c 	and.w	r2, r3, #12
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d1eb      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d023      	beq.n	800244c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002410:	4b43      	ldr	r3, [pc, #268]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	4a42      	ldr	r2, [pc, #264]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002416:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800241a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002428:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002430:	4a3b      	ldr	r2, [pc, #236]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002432:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002436:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002438:	4b39      	ldr	r3, [pc, #228]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4936      	ldr	r1, [pc, #216]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
 800244a:	e008      	b.n	800245e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2b80      	cmp	r3, #128	; 0x80
 8002450:	d105      	bne.n	800245e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002452:	4b33      	ldr	r3, [pc, #204]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	4a32      	ldr	r2, [pc, #200]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002458:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800245c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800245e:	4b2f      	ldr	r3, [pc, #188]	; (800251c <HAL_RCC_ClockConfig+0x260>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d21d      	bcs.n	80024a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246c:	4b2b      	ldr	r3, [pc, #172]	; (800251c <HAL_RCC_ClockConfig+0x260>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f023 020f 	bic.w	r2, r3, #15
 8002474:	4929      	ldr	r1, [pc, #164]	; (800251c <HAL_RCC_ClockConfig+0x260>)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800247c:	f7ff f8c8 	bl	8001610 <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002482:	e00a      	b.n	800249a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002484:	f7ff f8c4 	bl	8001610 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e03b      	b.n	8002512 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_RCC_ClockConfig+0x260>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1ed      	bne.n	8002484 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b4:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4917      	ldr	r1, [pc, #92]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	490f      	ldr	r1, [pc, #60]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024e6:	f000 f825 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <HAL_RCC_ClockConfig+0x264>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	490c      	ldr	r1, [pc, #48]	; (8002528 <HAL_RCC_ClockConfig+0x26c>)
 80024f8:	5ccb      	ldrb	r3, [r1, r3]
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <HAL_RCC_ClockConfig+0x270>)
 8002504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_RCC_ClockConfig+0x274>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff f834 	bl	8001578 <HAL_InitTick>
 8002510:	4603      	mov	r3, r0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40022000 	.word	0x40022000
 8002520:	40021000 	.word	0x40021000
 8002524:	04c4b400 	.word	0x04c4b400
 8002528:	080059d0 	.word	0x080059d0
 800252c:	20000004 	.word	0x20000004
 8002530:	20000008 	.word	0x20000008

08002534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800253a:	4b2c      	ldr	r3, [pc, #176]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b04      	cmp	r3, #4
 8002544:	d102      	bne.n	800254c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002546:	4b2a      	ldr	r3, [pc, #168]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	e047      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800254c:	4b27      	ldr	r3, [pc, #156]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b08      	cmp	r3, #8
 8002556:	d102      	bne.n	800255e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002558:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	e03e      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b0c      	cmp	r3, #12
 8002568:	d136      	bne.n	80025d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	3301      	adds	r3, #1
 8002580:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d10c      	bne.n	80025a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002588:	4a1a      	ldr	r2, [pc, #104]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	4a16      	ldr	r2, [pc, #88]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002592:	68d2      	ldr	r2, [r2, #12]
 8002594:	0a12      	lsrs	r2, r2, #8
 8002596:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800259a:	fb02 f303 	mul.w	r3, r2, r3
 800259e:	617b      	str	r3, [r7, #20]
      break;
 80025a0:	e00c      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025a2:	4a13      	ldr	r2, [pc, #76]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025aa:	4a10      	ldr	r2, [pc, #64]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ac:	68d2      	ldr	r2, [r2, #12]
 80025ae:	0a12      	lsrs	r2, r2, #8
 80025b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025b4:	fb02 f303 	mul.w	r3, r2, r3
 80025b8:	617b      	str	r3, [r7, #20]
      break;
 80025ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	0e5b      	lsrs	r3, r3, #25
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	3301      	adds	r3, #1
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	e001      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025dc:	693b      	ldr	r3, [r7, #16]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	371c      	adds	r7, #28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	00f42400 	.word	0x00f42400
 80025f4:	016e3600 	.word	0x016e3600

080025f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <HAL_RCC_GetHCLKFreq+0x14>)
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000004 	.word	0x20000004

08002610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002614:	f7ff fff0 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 8002618:	4602      	mov	r2, r0
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	4904      	ldr	r1, [pc, #16]	; (8002638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002630:	4618      	mov	r0, r3
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40021000 	.word	0x40021000
 8002638:	080059e0 	.word	0x080059e0

0800263c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002640:	f7ff ffda 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	0adb      	lsrs	r3, r3, #11
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4904      	ldr	r1, [pc, #16]	; (8002664 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	080059e0 	.word	0x080059e0

08002668 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800266e:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	3301      	adds	r3, #1
 8002684:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d10c      	bne.n	80026a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800268c:	4a17      	ldr	r2, [pc, #92]	; (80026ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002696:	68d2      	ldr	r2, [r2, #12]
 8002698:	0a12      	lsrs	r2, r2, #8
 800269a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800269e:	fb02 f303 	mul.w	r3, r2, r3
 80026a2:	617b      	str	r3, [r7, #20]
    break;
 80026a4:	e00c      	b.n	80026c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	4a0e      	ldr	r2, [pc, #56]	; (80026e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026b0:	68d2      	ldr	r2, [r2, #12]
 80026b2:	0a12      	lsrs	r2, r2, #8
 80026b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026b8:	fb02 f303 	mul.w	r3, r2, r3
 80026bc:	617b      	str	r3, [r7, #20]
    break;
 80026be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0e5b      	lsrs	r3, r3, #25
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	3301      	adds	r3, #1
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80026da:	687b      	ldr	r3, [r7, #4]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	40021000 	.word	0x40021000
 80026ec:	016e3600 	.word	0x016e3600
 80026f0:	00f42400 	.word	0x00f42400

080026f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026fc:	2300      	movs	r3, #0
 80026fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002700:	2300      	movs	r3, #0
 8002702:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 8098 	beq.w	8002842 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002716:	4b43      	ldr	r3, [pc, #268]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10d      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	4b40      	ldr	r3, [pc, #256]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	4a3f      	ldr	r2, [pc, #252]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272c:	6593      	str	r3, [r2, #88]	; 0x58
 800272e:	4b3d      	ldr	r3, [pc, #244]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273a:	2301      	movs	r3, #1
 800273c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800273e:	4b3a      	ldr	r3, [pc, #232]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a39      	ldr	r2, [pc, #228]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002748:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800274a:	f7fe ff61 	bl	8001610 <HAL_GetTick>
 800274e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002750:	e009      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002752:	f7fe ff5d 	bl	8001610 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d902      	bls.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	74fb      	strb	r3, [r7, #19]
        break;
 8002764:	e005      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002766:	4b30      	ldr	r3, [pc, #192]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0ef      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002772:	7cfb      	ldrb	r3, [r7, #19]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d159      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002778:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002782:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d01e      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	429a      	cmp	r2, r3
 8002792:	d019      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002794:	4b23      	ldr	r3, [pc, #140]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800279e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027a0:	4b20      	ldr	r3, [pc, #128]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a6:	4a1f      	ldr	r2, [pc, #124]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027b0:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b6:	4a1b      	ldr	r2, [pc, #108]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027c0:	4a18      	ldr	r2, [pc, #96]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d016      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7fe ff1d 	bl	8001610 <HAL_GetTick>
 80027d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d8:	e00b      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f7fe ff19 	bl	8001610 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d902      	bls.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	74fb      	strb	r3, [r7, #19]
            break;
 80027f0:	e006      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0ec      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10b      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	4903      	ldr	r1, [pc, #12]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800281c:	e008      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800281e:	7cfb      	ldrb	r3, [r7, #19]
 8002820:	74bb      	strb	r3, [r7, #18]
 8002822:	e005      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002824:	40021000 	.word	0x40021000
 8002828:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002830:	7c7b      	ldrb	r3, [r7, #17]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d105      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002836:	4ba6      	ldr	r3, [pc, #664]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283a:	4aa5      	ldr	r2, [pc, #660]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800283c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002840:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800284e:	4ba0      	ldr	r3, [pc, #640]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002854:	f023 0203 	bic.w	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	499c      	ldr	r1, [pc, #624]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002870:	4b97      	ldr	r3, [pc, #604]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	f023 020c 	bic.w	r2, r3, #12
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4994      	ldr	r1, [pc, #592]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002892:	4b8f      	ldr	r3, [pc, #572]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002898:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	498b      	ldr	r1, [pc, #556]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028b4:	4b86      	ldr	r3, [pc, #536]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	4983      	ldr	r1, [pc, #524]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028d6:	4b7e      	ldr	r3, [pc, #504]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	497a      	ldr	r1, [pc, #488]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028f8:	4b75      	ldr	r3, [pc, #468]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	4972      	ldr	r1, [pc, #456]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800291a:	4b6d      	ldr	r3, [pc, #436]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002920:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	4969      	ldr	r1, [pc, #420]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800293c:	4b64      	ldr	r3, [pc, #400]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002942:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	4961      	ldr	r1, [pc, #388]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800295e:	4b5c      	ldr	r3, [pc, #368]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002964:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	4958      	ldr	r1, [pc, #352]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297c:	2b00      	cmp	r3, #0
 800297e:	d015      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002980:	4b53      	ldr	r3, [pc, #332]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	4950      	ldr	r1, [pc, #320]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800299e:	d105      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a0:	4b4b      	ldr	r3, [pc, #300]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a4a      	ldr	r2, [pc, #296]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d015      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029b8:	4b45      	ldr	r3, [pc, #276]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	4942      	ldr	r1, [pc, #264]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d6:	d105      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d8:	4b3d      	ldr	r3, [pc, #244]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4a3c      	ldr	r2, [pc, #240]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d015      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80029f0:	4b37      	ldr	r3, [pc, #220]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4934      	ldr	r1, [pc, #208]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a10:	4b2f      	ldr	r3, [pc, #188]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a2e      	ldr	r2, [pc, #184]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a1a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d015      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a28:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a36:	4926      	ldr	r1, [pc, #152]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a46:	d105      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a48:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a20      	ldr	r2, [pc, #128]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a52:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d015      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	4918      	ldr	r1, [pc, #96]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a80:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d015      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a98:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	490a      	ldr	r1, [pc, #40]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a04      	ldr	r2, [pc, #16]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002ac4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000

08002ad4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e049      	b.n	8002b7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fe fc00 	bl	8001300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	4619      	mov	r1, r3
 8002b12:	4610      	mov	r0, r2
 8002b14:	f000 fba4 	bl	8003260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e049      	b.n	8002c28 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d106      	bne.n	8002bae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f841 	bl	8002c30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	f000 fb4d 	bl	8003260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d109      	bne.n	8002c68 <HAL_TIM_PWM_Start+0x24>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	bf14      	ite	ne
 8002c60:	2301      	movne	r3, #1
 8002c62:	2300      	moveq	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	e03c      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x9e>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d109      	bne.n	8002c82 <HAL_TIM_PWM_Start+0x3e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	bf14      	ite	ne
 8002c7a:	2301      	movne	r3, #1
 8002c7c:	2300      	moveq	r3, #0
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	e02f      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x9e>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d109      	bne.n	8002c9c <HAL_TIM_PWM_Start+0x58>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	bf14      	ite	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	2300      	moveq	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e022      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x9e>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b0c      	cmp	r3, #12
 8002ca0:	d109      	bne.n	8002cb6 <HAL_TIM_PWM_Start+0x72>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	bf14      	ite	ne
 8002cae:	2301      	movne	r3, #1
 8002cb0:	2300      	moveq	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	e015      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x9e>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	d109      	bne.n	8002cd0 <HAL_TIM_PWM_Start+0x8c>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	bf14      	ite	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	2300      	moveq	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	e008      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x9e>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	bf14      	ite	ne
 8002cdc:	2301      	movne	r3, #1
 8002cde:	2300      	moveq	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e097      	b.n	8002e1a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_PWM_Start+0xb6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cf8:	e023      	b.n	8002d42 <HAL_TIM_PWM_Start+0xfe>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIM_PWM_Start+0xc6>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d08:	e01b      	b.n	8002d42 <HAL_TIM_PWM_Start+0xfe>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d104      	bne.n	8002d1a <HAL_TIM_PWM_Start+0xd6>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d18:	e013      	b.n	8002d42 <HAL_TIM_PWM_Start+0xfe>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	d104      	bne.n	8002d2a <HAL_TIM_PWM_Start+0xe6>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d28:	e00b      	b.n	8002d42 <HAL_TIM_PWM_Start+0xfe>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d104      	bne.n	8002d3a <HAL_TIM_PWM_Start+0xf6>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d38:	e003      	b.n	8002d42 <HAL_TIM_PWM_Start+0xfe>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2201      	movs	r2, #1
 8002d48:	6839      	ldr	r1, [r7, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 feaa 	bl	8003aa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a33      	ldr	r2, [pc, #204]	; (8002e24 <HAL_TIM_PWM_Start+0x1e0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <HAL_TIM_PWM_Start+0x13e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a32      	ldr	r2, [pc, #200]	; (8002e28 <HAL_TIM_PWM_Start+0x1e4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00e      	beq.n	8002d82 <HAL_TIM_PWM_Start+0x13e>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a30      	ldr	r2, [pc, #192]	; (8002e2c <HAL_TIM_PWM_Start+0x1e8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d009      	beq.n	8002d82 <HAL_TIM_PWM_Start+0x13e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a2f      	ldr	r2, [pc, #188]	; (8002e30 <HAL_TIM_PWM_Start+0x1ec>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d004      	beq.n	8002d82 <HAL_TIM_PWM_Start+0x13e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2d      	ldr	r2, [pc, #180]	; (8002e34 <HAL_TIM_PWM_Start+0x1f0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d101      	bne.n	8002d86 <HAL_TIM_PWM_Start+0x142>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <HAL_TIM_PWM_Start+0x144>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d007      	beq.n	8002d9c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d9a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a20      	ldr	r2, [pc, #128]	; (8002e24 <HAL_TIM_PWM_Start+0x1e0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d018      	beq.n	8002dd8 <HAL_TIM_PWM_Start+0x194>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dae:	d013      	beq.n	8002dd8 <HAL_TIM_PWM_Start+0x194>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a20      	ldr	r2, [pc, #128]	; (8002e38 <HAL_TIM_PWM_Start+0x1f4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00e      	beq.n	8002dd8 <HAL_TIM_PWM_Start+0x194>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1f      	ldr	r2, [pc, #124]	; (8002e3c <HAL_TIM_PWM_Start+0x1f8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d009      	beq.n	8002dd8 <HAL_TIM_PWM_Start+0x194>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a17      	ldr	r2, [pc, #92]	; (8002e28 <HAL_TIM_PWM_Start+0x1e4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d004      	beq.n	8002dd8 <HAL_TIM_PWM_Start+0x194>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a16      	ldr	r2, [pc, #88]	; (8002e2c <HAL_TIM_PWM_Start+0x1e8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d115      	bne.n	8002e04 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <HAL_TIM_PWM_Start+0x1fc>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2b06      	cmp	r3, #6
 8002de8:	d015      	beq.n	8002e16 <HAL_TIM_PWM_Start+0x1d2>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df0:	d011      	beq.n	8002e16 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0201 	orr.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e02:	e008      	b.n	8002e16 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	e000      	b.n	8002e18 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40012c00 	.word	0x40012c00
 8002e28:	40013400 	.word	0x40013400
 8002e2c:	40014000 	.word	0x40014000
 8002e30:	40014400 	.word	0x40014400
 8002e34:	40014800 	.word	0x40014800
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40000800 	.word	0x40000800
 8002e40:	00010007 	.word	0x00010007

08002e44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e0ff      	b.n	8003062 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b14      	cmp	r3, #20
 8002e6e:	f200 80f0 	bhi.w	8003052 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002e72:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e78:	08002ecd 	.word	0x08002ecd
 8002e7c:	08003053 	.word	0x08003053
 8002e80:	08003053 	.word	0x08003053
 8002e84:	08003053 	.word	0x08003053
 8002e88:	08002f0d 	.word	0x08002f0d
 8002e8c:	08003053 	.word	0x08003053
 8002e90:	08003053 	.word	0x08003053
 8002e94:	08003053 	.word	0x08003053
 8002e98:	08002f4f 	.word	0x08002f4f
 8002e9c:	08003053 	.word	0x08003053
 8002ea0:	08003053 	.word	0x08003053
 8002ea4:	08003053 	.word	0x08003053
 8002ea8:	08002f8f 	.word	0x08002f8f
 8002eac:	08003053 	.word	0x08003053
 8002eb0:	08003053 	.word	0x08003053
 8002eb4:	08003053 	.word	0x08003053
 8002eb8:	08002fd1 	.word	0x08002fd1
 8002ebc:	08003053 	.word	0x08003053
 8002ec0:	08003053 	.word	0x08003053
 8002ec4:	08003053 	.word	0x08003053
 8002ec8:	08003011 	.word	0x08003011
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fa54 	bl	8003380 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0208 	orr.w	r2, r2, #8
 8002ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0204 	bic.w	r2, r2, #4
 8002ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6999      	ldr	r1, [r3, #24]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	619a      	str	r2, [r3, #24]
      break;
 8002f0a:	e0a5      	b.n	8003058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fac4 	bl	80034a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699a      	ldr	r2, [r3, #24]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6999      	ldr	r1, [r3, #24]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	021a      	lsls	r2, r3, #8
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	619a      	str	r2, [r3, #24]
      break;
 8002f4c:	e084      	b.n	8003058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 fb2d 	bl	80035b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0208 	orr.w	r2, r2, #8
 8002f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0204 	bic.w	r2, r2, #4
 8002f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69d9      	ldr	r1, [r3, #28]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	61da      	str	r2, [r3, #28]
      break;
 8002f8c:	e064      	b.n	8003058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fb95 	bl	80036c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69d9      	ldr	r1, [r3, #28]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	021a      	lsls	r2, r3, #8
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	61da      	str	r2, [r3, #28]
      break;
 8002fce:	e043      	b.n	8003058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fbfe 	bl	80037d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0208 	orr.w	r2, r2, #8
 8002fea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0204 	bic.w	r2, r2, #4
 8002ffa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	691a      	ldr	r2, [r3, #16]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800300e:	e023      	b.n	8003058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fc42 	bl	80038a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800302a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800303a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	021a      	lsls	r2, r3, #8
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003050:	e002      	b.n	8003058 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	75fb      	strb	r3, [r7, #23]
      break;
 8003056:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003060:	7dfb      	ldrb	r3, [r7, #23]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop

0800306c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_TIM_ConfigClockSource+0x1c>
 8003084:	2302      	movs	r3, #2
 8003086:	e0de      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x1da>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80030a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a63      	ldr	r2, [pc, #396]	; (8003250 <HAL_TIM_ConfigClockSource+0x1e4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	f000 80a9 	beq.w	800321a <HAL_TIM_ConfigClockSource+0x1ae>
 80030c8:	4a61      	ldr	r2, [pc, #388]	; (8003250 <HAL_TIM_ConfigClockSource+0x1e4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	f200 80ae 	bhi.w	800322c <HAL_TIM_ConfigClockSource+0x1c0>
 80030d0:	4a60      	ldr	r2, [pc, #384]	; (8003254 <HAL_TIM_ConfigClockSource+0x1e8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	f000 80a1 	beq.w	800321a <HAL_TIM_ConfigClockSource+0x1ae>
 80030d8:	4a5e      	ldr	r2, [pc, #376]	; (8003254 <HAL_TIM_ConfigClockSource+0x1e8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	f200 80a6 	bhi.w	800322c <HAL_TIM_ConfigClockSource+0x1c0>
 80030e0:	4a5d      	ldr	r2, [pc, #372]	; (8003258 <HAL_TIM_ConfigClockSource+0x1ec>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	f000 8099 	beq.w	800321a <HAL_TIM_ConfigClockSource+0x1ae>
 80030e8:	4a5b      	ldr	r2, [pc, #364]	; (8003258 <HAL_TIM_ConfigClockSource+0x1ec>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	f200 809e 	bhi.w	800322c <HAL_TIM_ConfigClockSource+0x1c0>
 80030f0:	4a5a      	ldr	r2, [pc, #360]	; (800325c <HAL_TIM_ConfigClockSource+0x1f0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	f000 8091 	beq.w	800321a <HAL_TIM_ConfigClockSource+0x1ae>
 80030f8:	4a58      	ldr	r2, [pc, #352]	; (800325c <HAL_TIM_ConfigClockSource+0x1f0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	f200 8096 	bhi.w	800322c <HAL_TIM_ConfigClockSource+0x1c0>
 8003100:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003104:	f000 8089 	beq.w	800321a <HAL_TIM_ConfigClockSource+0x1ae>
 8003108:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800310c:	f200 808e 	bhi.w	800322c <HAL_TIM_ConfigClockSource+0x1c0>
 8003110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003114:	d03e      	beq.n	8003194 <HAL_TIM_ConfigClockSource+0x128>
 8003116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800311a:	f200 8087 	bhi.w	800322c <HAL_TIM_ConfigClockSource+0x1c0>
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003122:	f000 8086 	beq.w	8003232 <HAL_TIM_ConfigClockSource+0x1c6>
 8003126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312a:	d87f      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x1c0>
 800312c:	2b70      	cmp	r3, #112	; 0x70
 800312e:	d01a      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0xfa>
 8003130:	2b70      	cmp	r3, #112	; 0x70
 8003132:	d87b      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x1c0>
 8003134:	2b60      	cmp	r3, #96	; 0x60
 8003136:	d050      	beq.n	80031da <HAL_TIM_ConfigClockSource+0x16e>
 8003138:	2b60      	cmp	r3, #96	; 0x60
 800313a:	d877      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x1c0>
 800313c:	2b50      	cmp	r3, #80	; 0x50
 800313e:	d03c      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x14e>
 8003140:	2b50      	cmp	r3, #80	; 0x50
 8003142:	d873      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x1c0>
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d058      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0x18e>
 8003148:	2b40      	cmp	r3, #64	; 0x40
 800314a:	d86f      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x1c0>
 800314c:	2b30      	cmp	r3, #48	; 0x30
 800314e:	d064      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x1ae>
 8003150:	2b30      	cmp	r3, #48	; 0x30
 8003152:	d86b      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x1c0>
 8003154:	2b20      	cmp	r3, #32
 8003156:	d060      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x1ae>
 8003158:	2b20      	cmp	r3, #32
 800315a:	d867      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x1c0>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d05c      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x1ae>
 8003160:	2b10      	cmp	r3, #16
 8003162:	d05a      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x1ae>
 8003164:	e062      	b.n	800322c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6899      	ldr	r1, [r3, #8]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f000 fc75 	bl	8003a64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	609a      	str	r2, [r3, #8]
      break;
 8003192:	e04f      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6899      	ldr	r1, [r3, #8]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f000 fc5e 	bl	8003a64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031b6:	609a      	str	r2, [r3, #8]
      break;
 80031b8:	e03c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6859      	ldr	r1, [r3, #4]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f000 fbd0 	bl	800396c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2150      	movs	r1, #80	; 0x50
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fc29 	bl	8003a2a <TIM_ITRx_SetConfig>
      break;
 80031d8:	e02c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6859      	ldr	r1, [r3, #4]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	461a      	mov	r2, r3
 80031e8:	f000 fbef 	bl	80039ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2160      	movs	r1, #96	; 0x60
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fc19 	bl	8003a2a <TIM_ITRx_SetConfig>
      break;
 80031f8:	e01c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6859      	ldr	r1, [r3, #4]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	461a      	mov	r2, r3
 8003208:	f000 fbb0 	bl	800396c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2140      	movs	r1, #64	; 0x40
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fc09 	bl	8003a2a <TIM_ITRx_SetConfig>
      break;
 8003218:	e00c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4619      	mov	r1, r3
 8003224:	4610      	mov	r0, r2
 8003226:	f000 fc00 	bl	8003a2a <TIM_ITRx_SetConfig>
      break;
 800322a:	e003      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
      break;
 8003230:	e000      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	00100070 	.word	0x00100070
 8003254:	00100040 	.word	0x00100040
 8003258:	00100030 	.word	0x00100030
 800325c:	00100020 	.word	0x00100020

08003260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a3c      	ldr	r2, [pc, #240]	; (8003364 <TIM_Base_SetConfig+0x104>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00f      	beq.n	8003298 <TIM_Base_SetConfig+0x38>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327e:	d00b      	beq.n	8003298 <TIM_Base_SetConfig+0x38>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a39      	ldr	r2, [pc, #228]	; (8003368 <TIM_Base_SetConfig+0x108>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d007      	beq.n	8003298 <TIM_Base_SetConfig+0x38>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a38      	ldr	r2, [pc, #224]	; (800336c <TIM_Base_SetConfig+0x10c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d003      	beq.n	8003298 <TIM_Base_SetConfig+0x38>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a37      	ldr	r2, [pc, #220]	; (8003370 <TIM_Base_SetConfig+0x110>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d108      	bne.n	80032aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a2d      	ldr	r2, [pc, #180]	; (8003364 <TIM_Base_SetConfig+0x104>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01b      	beq.n	80032ea <TIM_Base_SetConfig+0x8a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b8:	d017      	beq.n	80032ea <TIM_Base_SetConfig+0x8a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a2a      	ldr	r2, [pc, #168]	; (8003368 <TIM_Base_SetConfig+0x108>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d013      	beq.n	80032ea <TIM_Base_SetConfig+0x8a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a29      	ldr	r2, [pc, #164]	; (800336c <TIM_Base_SetConfig+0x10c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00f      	beq.n	80032ea <TIM_Base_SetConfig+0x8a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a28      	ldr	r2, [pc, #160]	; (8003370 <TIM_Base_SetConfig+0x110>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00b      	beq.n	80032ea <TIM_Base_SetConfig+0x8a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a27      	ldr	r2, [pc, #156]	; (8003374 <TIM_Base_SetConfig+0x114>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d007      	beq.n	80032ea <TIM_Base_SetConfig+0x8a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a26      	ldr	r2, [pc, #152]	; (8003378 <TIM_Base_SetConfig+0x118>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d003      	beq.n	80032ea <TIM_Base_SetConfig+0x8a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a25      	ldr	r2, [pc, #148]	; (800337c <TIM_Base_SetConfig+0x11c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d108      	bne.n	80032fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a10      	ldr	r2, [pc, #64]	; (8003364 <TIM_Base_SetConfig+0x104>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00f      	beq.n	8003348 <TIM_Base_SetConfig+0xe8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a11      	ldr	r2, [pc, #68]	; (8003370 <TIM_Base_SetConfig+0x110>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00b      	beq.n	8003348 <TIM_Base_SetConfig+0xe8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a10      	ldr	r2, [pc, #64]	; (8003374 <TIM_Base_SetConfig+0x114>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d007      	beq.n	8003348 <TIM_Base_SetConfig+0xe8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a0f      	ldr	r2, [pc, #60]	; (8003378 <TIM_Base_SetConfig+0x118>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d003      	beq.n	8003348 <TIM_Base_SetConfig+0xe8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a0e      	ldr	r2, [pc, #56]	; (800337c <TIM_Base_SetConfig+0x11c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d103      	bne.n	8003350 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	615a      	str	r2, [r3, #20]
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40012c00 	.word	0x40012c00
 8003368:	40000400 	.word	0x40000400
 800336c:	40000800 	.word	0x40000800
 8003370:	40013400 	.word	0x40013400
 8003374:	40014000 	.word	0x40014000
 8003378:	40014400 	.word	0x40014400
 800337c:	40014800 	.word	0x40014800

08003380 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	f023 0201 	bic.w	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0303 	bic.w	r3, r3, #3
 80033ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f023 0302 	bic.w	r3, r3, #2
 80033cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a2c      	ldr	r2, [pc, #176]	; (800348c <TIM_OC1_SetConfig+0x10c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00f      	beq.n	8003400 <TIM_OC1_SetConfig+0x80>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a2b      	ldr	r2, [pc, #172]	; (8003490 <TIM_OC1_SetConfig+0x110>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00b      	beq.n	8003400 <TIM_OC1_SetConfig+0x80>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a2a      	ldr	r2, [pc, #168]	; (8003494 <TIM_OC1_SetConfig+0x114>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d007      	beq.n	8003400 <TIM_OC1_SetConfig+0x80>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a29      	ldr	r2, [pc, #164]	; (8003498 <TIM_OC1_SetConfig+0x118>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d003      	beq.n	8003400 <TIM_OC1_SetConfig+0x80>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a28      	ldr	r2, [pc, #160]	; (800349c <TIM_OC1_SetConfig+0x11c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d10c      	bne.n	800341a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f023 0308 	bic.w	r3, r3, #8
 8003406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f023 0304 	bic.w	r3, r3, #4
 8003418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a1b      	ldr	r2, [pc, #108]	; (800348c <TIM_OC1_SetConfig+0x10c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00f      	beq.n	8003442 <TIM_OC1_SetConfig+0xc2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a1a      	ldr	r2, [pc, #104]	; (8003490 <TIM_OC1_SetConfig+0x110>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00b      	beq.n	8003442 <TIM_OC1_SetConfig+0xc2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a19      	ldr	r2, [pc, #100]	; (8003494 <TIM_OC1_SetConfig+0x114>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d007      	beq.n	8003442 <TIM_OC1_SetConfig+0xc2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a18      	ldr	r2, [pc, #96]	; (8003498 <TIM_OC1_SetConfig+0x118>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d003      	beq.n	8003442 <TIM_OC1_SetConfig+0xc2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a17      	ldr	r2, [pc, #92]	; (800349c <TIM_OC1_SetConfig+0x11c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d111      	bne.n	8003466 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	621a      	str	r2, [r3, #32]
}
 8003480:	bf00      	nop
 8003482:	371c      	adds	r7, #28
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	40012c00 	.word	0x40012c00
 8003490:	40013400 	.word	0x40013400
 8003494:	40014000 	.word	0x40014000
 8003498:	40014400 	.word	0x40014400
 800349c:	40014800 	.word	0x40014800

080034a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	f023 0210 	bic.w	r2, r3, #16
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f023 0320 	bic.w	r3, r3, #32
 80034ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a28      	ldr	r2, [pc, #160]	; (80035a0 <TIM_OC2_SetConfig+0x100>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d003      	beq.n	800350c <TIM_OC2_SetConfig+0x6c>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a27      	ldr	r2, [pc, #156]	; (80035a4 <TIM_OC2_SetConfig+0x104>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d10d      	bne.n	8003528 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003526:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a1d      	ldr	r2, [pc, #116]	; (80035a0 <TIM_OC2_SetConfig+0x100>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00f      	beq.n	8003550 <TIM_OC2_SetConfig+0xb0>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a1c      	ldr	r2, [pc, #112]	; (80035a4 <TIM_OC2_SetConfig+0x104>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00b      	beq.n	8003550 <TIM_OC2_SetConfig+0xb0>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a1b      	ldr	r2, [pc, #108]	; (80035a8 <TIM_OC2_SetConfig+0x108>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d007      	beq.n	8003550 <TIM_OC2_SetConfig+0xb0>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a1a      	ldr	r2, [pc, #104]	; (80035ac <TIM_OC2_SetConfig+0x10c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d003      	beq.n	8003550 <TIM_OC2_SetConfig+0xb0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <TIM_OC2_SetConfig+0x110>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d113      	bne.n	8003578 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003556:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800355e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	621a      	str	r2, [r3, #32]
}
 8003592:	bf00      	nop
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40012c00 	.word	0x40012c00
 80035a4:	40013400 	.word	0x40013400
 80035a8:	40014000 	.word	0x40014000
 80035ac:	40014400 	.word	0x40014400
 80035b0:	40014800 	.word	0x40014800

080035b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0303 	bic.w	r3, r3, #3
 80035ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	021b      	lsls	r3, r3, #8
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a27      	ldr	r2, [pc, #156]	; (80036b0 <TIM_OC3_SetConfig+0xfc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d003      	beq.n	800361e <TIM_OC3_SetConfig+0x6a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a26      	ldr	r2, [pc, #152]	; (80036b4 <TIM_OC3_SetConfig+0x100>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d10d      	bne.n	800363a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003624:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a1c      	ldr	r2, [pc, #112]	; (80036b0 <TIM_OC3_SetConfig+0xfc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00f      	beq.n	8003662 <TIM_OC3_SetConfig+0xae>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a1b      	ldr	r2, [pc, #108]	; (80036b4 <TIM_OC3_SetConfig+0x100>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00b      	beq.n	8003662 <TIM_OC3_SetConfig+0xae>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a1a      	ldr	r2, [pc, #104]	; (80036b8 <TIM_OC3_SetConfig+0x104>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d007      	beq.n	8003662 <TIM_OC3_SetConfig+0xae>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a19      	ldr	r2, [pc, #100]	; (80036bc <TIM_OC3_SetConfig+0x108>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d003      	beq.n	8003662 <TIM_OC3_SetConfig+0xae>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a18      	ldr	r2, [pc, #96]	; (80036c0 <TIM_OC3_SetConfig+0x10c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d113      	bne.n	800368a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	621a      	str	r2, [r3, #32]
}
 80036a4:	bf00      	nop
 80036a6:	371c      	adds	r7, #28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	40012c00 	.word	0x40012c00
 80036b4:	40013400 	.word	0x40013400
 80036b8:	40014000 	.word	0x40014000
 80036bc:	40014400 	.word	0x40014400
 80036c0:	40014800 	.word	0x40014800

080036c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	021b      	lsls	r3, r3, #8
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003712:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	031b      	lsls	r3, r3, #12
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a28      	ldr	r2, [pc, #160]	; (80037c4 <TIM_OC4_SetConfig+0x100>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d003      	beq.n	8003730 <TIM_OC4_SetConfig+0x6c>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a27      	ldr	r2, [pc, #156]	; (80037c8 <TIM_OC4_SetConfig+0x104>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d10d      	bne.n	800374c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	031b      	lsls	r3, r3, #12
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800374a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a1d      	ldr	r2, [pc, #116]	; (80037c4 <TIM_OC4_SetConfig+0x100>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00f      	beq.n	8003774 <TIM_OC4_SetConfig+0xb0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a1c      	ldr	r2, [pc, #112]	; (80037c8 <TIM_OC4_SetConfig+0x104>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00b      	beq.n	8003774 <TIM_OC4_SetConfig+0xb0>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a1b      	ldr	r2, [pc, #108]	; (80037cc <TIM_OC4_SetConfig+0x108>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d007      	beq.n	8003774 <TIM_OC4_SetConfig+0xb0>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a1a      	ldr	r2, [pc, #104]	; (80037d0 <TIM_OC4_SetConfig+0x10c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d003      	beq.n	8003774 <TIM_OC4_SetConfig+0xb0>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a19      	ldr	r2, [pc, #100]	; (80037d4 <TIM_OC4_SetConfig+0x110>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d113      	bne.n	800379c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800377a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003782:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	019b      	lsls	r3, r3, #6
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	019b      	lsls	r3, r3, #6
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	621a      	str	r2, [r3, #32]
}
 80037b6:	bf00      	nop
 80037b8:	371c      	adds	r7, #28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40012c00 	.word	0x40012c00
 80037c8:	40013400 	.word	0x40013400
 80037cc:	40014000 	.word	0x40014000
 80037d0:	40014400 	.word	0x40014400
 80037d4:	40014800 	.word	0x40014800

080037d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800381c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	041b      	lsls	r3, r3, #16
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a17      	ldr	r2, [pc, #92]	; (800388c <TIM_OC5_SetConfig+0xb4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00f      	beq.n	8003852 <TIM_OC5_SetConfig+0x7a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a16      	ldr	r2, [pc, #88]	; (8003890 <TIM_OC5_SetConfig+0xb8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00b      	beq.n	8003852 <TIM_OC5_SetConfig+0x7a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a15      	ldr	r2, [pc, #84]	; (8003894 <TIM_OC5_SetConfig+0xbc>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d007      	beq.n	8003852 <TIM_OC5_SetConfig+0x7a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a14      	ldr	r2, [pc, #80]	; (8003898 <TIM_OC5_SetConfig+0xc0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d003      	beq.n	8003852 <TIM_OC5_SetConfig+0x7a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a13      	ldr	r2, [pc, #76]	; (800389c <TIM_OC5_SetConfig+0xc4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d109      	bne.n	8003866 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003858:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	621a      	str	r2, [r3, #32]
}
 8003880:	bf00      	nop
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40013400 	.word	0x40013400
 8003894:	40014000 	.word	0x40014000
 8003898:	40014400 	.word	0x40014400
 800389c:	40014800 	.word	0x40014800

080038a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	051b      	lsls	r3, r3, #20
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a18      	ldr	r2, [pc, #96]	; (8003958 <TIM_OC6_SetConfig+0xb8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00f      	beq.n	800391c <TIM_OC6_SetConfig+0x7c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a17      	ldr	r2, [pc, #92]	; (800395c <TIM_OC6_SetConfig+0xbc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00b      	beq.n	800391c <TIM_OC6_SetConfig+0x7c>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a16      	ldr	r2, [pc, #88]	; (8003960 <TIM_OC6_SetConfig+0xc0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d007      	beq.n	800391c <TIM_OC6_SetConfig+0x7c>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a15      	ldr	r2, [pc, #84]	; (8003964 <TIM_OC6_SetConfig+0xc4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d003      	beq.n	800391c <TIM_OC6_SetConfig+0x7c>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a14      	ldr	r2, [pc, #80]	; (8003968 <TIM_OC6_SetConfig+0xc8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d109      	bne.n	8003930 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003922:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	029b      	lsls	r3, r3, #10
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4313      	orrs	r3, r2
 800392e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	621a      	str	r2, [r3, #32]
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40012c00 	.word	0x40012c00
 800395c:	40013400 	.word	0x40013400
 8003960:	40014000 	.word	0x40014000
 8003964:	40014400 	.word	0x40014400
 8003968:	40014800 	.word	0x40014800

0800396c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f023 0201 	bic.w	r2, r3, #1
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f023 030a 	bic.w	r3, r3, #10
 80039a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	621a      	str	r2, [r3, #32]
}
 80039be:	bf00      	nop
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b087      	sub	sp, #28
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f023 0210 	bic.w	r2, r3, #16
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	031b      	lsls	r3, r3, #12
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b085      	sub	sp, #20
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f043 0307 	orr.w	r3, r3, #7
 8003a50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	609a      	str	r2, [r3, #8]
}
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	021a      	lsls	r2, r3, #8
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	609a      	str	r2, [r3, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	371c      	adds	r7, #28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f003 031f 	and.w	r3, r3, #31
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a1a      	ldr	r2, [r3, #32]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a1a      	ldr	r2, [r3, #32]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8003adc:	431a      	orrs	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	621a      	str	r2, [r3, #32]
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e065      	b.n	8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2c      	ldr	r2, [pc, #176]	; (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d004      	beq.n	8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a2b      	ldr	r2, [pc, #172]	; (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d108      	bne.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1b      	ldr	r2, [pc, #108]	; (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d018      	beq.n	8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7e:	d013      	beq.n	8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00e      	beq.n	8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a17      	ldr	r2, [pc, #92]	; (8003bec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d009      	beq.n	8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a12      	ldr	r2, [pc, #72]	; (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d004      	beq.n	8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a13      	ldr	r2, [pc, #76]	; (8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d10c      	bne.n	8003bc2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	40012c00 	.word	0x40012c00
 8003be4:	40013400 	.word	0x40013400
 8003be8:	40000400 	.word	0x40000400
 8003bec:	40000800 	.word	0x40000800
 8003bf0:	40014000 	.word	0x40014000

08003bf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e087      	b.n	8003d20 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	041b      	lsls	r3, r3, #16
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a27      	ldr	r2, [pc, #156]	; (8003d2c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d004      	beq.n	8003c9e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a25      	ldr	r2, [pc, #148]	; (8003d30 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d106      	bne.n	8003cac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d004      	beq.n	8003cc0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d126      	bne.n	8003d0e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cca:	051b      	lsls	r3, r3, #20
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a0e      	ldr	r2, [pc, #56]	; (8003d2c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d004      	beq.n	8003d00 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a0d      	ldr	r2, [pc, #52]	; (8003d30 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d106      	bne.n	8003d0e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40013400 	.word	0x40013400

08003d34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e042      	b.n	8003dcc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d106      	bne.n	8003d5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7fd fb73 	bl	8001444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2224      	movs	r2, #36	; 0x24
 8003d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0201 	bic.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f82c 	bl	8003dd4 <UART_SetConfig>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e022      	b.n	8003dcc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 faec 	bl	800436c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003da2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003db2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fb73 	bl	80044b0 <UART_CheckIdleState>
 8003dca:	4603      	mov	r3, r0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd8:	b08c      	sub	sp, #48	; 0x30
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	431a      	orrs	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4bab      	ldr	r3, [pc, #684]	; (80040b0 <UART_SetConfig+0x2dc>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	6812      	ldr	r2, [r2, #0]
 8003e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4aa0      	ldr	r2, [pc, #640]	; (80040b4 <UART_SetConfig+0x2e0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d004      	beq.n	8003e40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003e4a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e54:	430b      	orrs	r3, r1
 8003e56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	f023 010f 	bic.w	r1, r3, #15
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a91      	ldr	r2, [pc, #580]	; (80040b8 <UART_SetConfig+0x2e4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d125      	bne.n	8003ec4 <UART_SetConfig+0xf0>
 8003e78:	4b90      	ldr	r3, [pc, #576]	; (80040bc <UART_SetConfig+0x2e8>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d81a      	bhi.n	8003ebc <UART_SetConfig+0xe8>
 8003e86:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <UART_SetConfig+0xb8>)
 8003e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8c:	08003e9d 	.word	0x08003e9d
 8003e90:	08003ead 	.word	0x08003ead
 8003e94:	08003ea5 	.word	0x08003ea5
 8003e98:	08003eb5 	.word	0x08003eb5
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ea2:	e0d6      	b.n	8004052 <UART_SetConfig+0x27e>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eaa:	e0d2      	b.n	8004052 <UART_SetConfig+0x27e>
 8003eac:	2304      	movs	r3, #4
 8003eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eb2:	e0ce      	b.n	8004052 <UART_SetConfig+0x27e>
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eba:	e0ca      	b.n	8004052 <UART_SetConfig+0x27e>
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ec2:	e0c6      	b.n	8004052 <UART_SetConfig+0x27e>
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a7d      	ldr	r2, [pc, #500]	; (80040c0 <UART_SetConfig+0x2ec>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d138      	bne.n	8003f40 <UART_SetConfig+0x16c>
 8003ece:	4b7b      	ldr	r3, [pc, #492]	; (80040bc <UART_SetConfig+0x2e8>)
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b0c      	cmp	r3, #12
 8003eda:	d82d      	bhi.n	8003f38 <UART_SetConfig+0x164>
 8003edc:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <UART_SetConfig+0x110>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003f19 	.word	0x08003f19
 8003ee8:	08003f39 	.word	0x08003f39
 8003eec:	08003f39 	.word	0x08003f39
 8003ef0:	08003f39 	.word	0x08003f39
 8003ef4:	08003f29 	.word	0x08003f29
 8003ef8:	08003f39 	.word	0x08003f39
 8003efc:	08003f39 	.word	0x08003f39
 8003f00:	08003f39 	.word	0x08003f39
 8003f04:	08003f21 	.word	0x08003f21
 8003f08:	08003f39 	.word	0x08003f39
 8003f0c:	08003f39 	.word	0x08003f39
 8003f10:	08003f39 	.word	0x08003f39
 8003f14:	08003f31 	.word	0x08003f31
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f1e:	e098      	b.n	8004052 <UART_SetConfig+0x27e>
 8003f20:	2302      	movs	r3, #2
 8003f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f26:	e094      	b.n	8004052 <UART_SetConfig+0x27e>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f2e:	e090      	b.n	8004052 <UART_SetConfig+0x27e>
 8003f30:	2308      	movs	r3, #8
 8003f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f36:	e08c      	b.n	8004052 <UART_SetConfig+0x27e>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f3e:	e088      	b.n	8004052 <UART_SetConfig+0x27e>
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a5f      	ldr	r2, [pc, #380]	; (80040c4 <UART_SetConfig+0x2f0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d125      	bne.n	8003f96 <UART_SetConfig+0x1c2>
 8003f4a:	4b5c      	ldr	r3, [pc, #368]	; (80040bc <UART_SetConfig+0x2e8>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f54:	2b30      	cmp	r3, #48	; 0x30
 8003f56:	d016      	beq.n	8003f86 <UART_SetConfig+0x1b2>
 8003f58:	2b30      	cmp	r3, #48	; 0x30
 8003f5a:	d818      	bhi.n	8003f8e <UART_SetConfig+0x1ba>
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d00a      	beq.n	8003f76 <UART_SetConfig+0x1a2>
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d814      	bhi.n	8003f8e <UART_SetConfig+0x1ba>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <UART_SetConfig+0x19a>
 8003f68:	2b10      	cmp	r3, #16
 8003f6a:	d008      	beq.n	8003f7e <UART_SetConfig+0x1aa>
 8003f6c:	e00f      	b.n	8003f8e <UART_SetConfig+0x1ba>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f74:	e06d      	b.n	8004052 <UART_SetConfig+0x27e>
 8003f76:	2302      	movs	r3, #2
 8003f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f7c:	e069      	b.n	8004052 <UART_SetConfig+0x27e>
 8003f7e:	2304      	movs	r3, #4
 8003f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f84:	e065      	b.n	8004052 <UART_SetConfig+0x27e>
 8003f86:	2308      	movs	r3, #8
 8003f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f8c:	e061      	b.n	8004052 <UART_SetConfig+0x27e>
 8003f8e:	2310      	movs	r3, #16
 8003f90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f94:	e05d      	b.n	8004052 <UART_SetConfig+0x27e>
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a4b      	ldr	r2, [pc, #300]	; (80040c8 <UART_SetConfig+0x2f4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d125      	bne.n	8003fec <UART_SetConfig+0x218>
 8003fa0:	4b46      	ldr	r3, [pc, #280]	; (80040bc <UART_SetConfig+0x2e8>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003faa:	2bc0      	cmp	r3, #192	; 0xc0
 8003fac:	d016      	beq.n	8003fdc <UART_SetConfig+0x208>
 8003fae:	2bc0      	cmp	r3, #192	; 0xc0
 8003fb0:	d818      	bhi.n	8003fe4 <UART_SetConfig+0x210>
 8003fb2:	2b80      	cmp	r3, #128	; 0x80
 8003fb4:	d00a      	beq.n	8003fcc <UART_SetConfig+0x1f8>
 8003fb6:	2b80      	cmp	r3, #128	; 0x80
 8003fb8:	d814      	bhi.n	8003fe4 <UART_SetConfig+0x210>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <UART_SetConfig+0x1f0>
 8003fbe:	2b40      	cmp	r3, #64	; 0x40
 8003fc0:	d008      	beq.n	8003fd4 <UART_SetConfig+0x200>
 8003fc2:	e00f      	b.n	8003fe4 <UART_SetConfig+0x210>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fca:	e042      	b.n	8004052 <UART_SetConfig+0x27e>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fd2:	e03e      	b.n	8004052 <UART_SetConfig+0x27e>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fda:	e03a      	b.n	8004052 <UART_SetConfig+0x27e>
 8003fdc:	2308      	movs	r3, #8
 8003fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fe2:	e036      	b.n	8004052 <UART_SetConfig+0x27e>
 8003fe4:	2310      	movs	r3, #16
 8003fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fea:	e032      	b.n	8004052 <UART_SetConfig+0x27e>
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a30      	ldr	r2, [pc, #192]	; (80040b4 <UART_SetConfig+0x2e0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d12a      	bne.n	800404c <UART_SetConfig+0x278>
 8003ff6:	4b31      	ldr	r3, [pc, #196]	; (80040bc <UART_SetConfig+0x2e8>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004000:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004004:	d01a      	beq.n	800403c <UART_SetConfig+0x268>
 8004006:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800400a:	d81b      	bhi.n	8004044 <UART_SetConfig+0x270>
 800400c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004010:	d00c      	beq.n	800402c <UART_SetConfig+0x258>
 8004012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004016:	d815      	bhi.n	8004044 <UART_SetConfig+0x270>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <UART_SetConfig+0x250>
 800401c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004020:	d008      	beq.n	8004034 <UART_SetConfig+0x260>
 8004022:	e00f      	b.n	8004044 <UART_SetConfig+0x270>
 8004024:	2300      	movs	r3, #0
 8004026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800402a:	e012      	b.n	8004052 <UART_SetConfig+0x27e>
 800402c:	2302      	movs	r3, #2
 800402e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004032:	e00e      	b.n	8004052 <UART_SetConfig+0x27e>
 8004034:	2304      	movs	r3, #4
 8004036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800403a:	e00a      	b.n	8004052 <UART_SetConfig+0x27e>
 800403c:	2308      	movs	r3, #8
 800403e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004042:	e006      	b.n	8004052 <UART_SetConfig+0x27e>
 8004044:	2310      	movs	r3, #16
 8004046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800404a:	e002      	b.n	8004052 <UART_SetConfig+0x27e>
 800404c:	2310      	movs	r3, #16
 800404e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a17      	ldr	r2, [pc, #92]	; (80040b4 <UART_SetConfig+0x2e0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	f040 80a8 	bne.w	80041ae <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800405e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004062:	2b08      	cmp	r3, #8
 8004064:	d834      	bhi.n	80040d0 <UART_SetConfig+0x2fc>
 8004066:	a201      	add	r2, pc, #4	; (adr r2, 800406c <UART_SetConfig+0x298>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	08004091 	.word	0x08004091
 8004070:	080040d1 	.word	0x080040d1
 8004074:	08004099 	.word	0x08004099
 8004078:	080040d1 	.word	0x080040d1
 800407c:	0800409f 	.word	0x0800409f
 8004080:	080040d1 	.word	0x080040d1
 8004084:	080040d1 	.word	0x080040d1
 8004088:	080040d1 	.word	0x080040d1
 800408c:	080040a7 	.word	0x080040a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004090:	f7fe fabe 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8004094:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004096:	e021      	b.n	80040dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004098:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <UART_SetConfig+0x2f8>)
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800409c:	e01e      	b.n	80040dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800409e:	f7fe fa49 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80040a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040a4:	e01a      	b.n	80040dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040ac:	e016      	b.n	80040dc <UART_SetConfig+0x308>
 80040ae:	bf00      	nop
 80040b0:	cfff69f3 	.word	0xcfff69f3
 80040b4:	40008000 	.word	0x40008000
 80040b8:	40013800 	.word	0x40013800
 80040bc:	40021000 	.word	0x40021000
 80040c0:	40004400 	.word	0x40004400
 80040c4:	40004800 	.word	0x40004800
 80040c8:	40004c00 	.word	0x40004c00
 80040cc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 812a 	beq.w	8004338 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	4a9e      	ldr	r2, [pc, #632]	; (8004364 <UART_SetConfig+0x590>)
 80040ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040ee:	461a      	mov	r2, r3
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	4413      	add	r3, r2
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	429a      	cmp	r2, r3
 8004106:	d305      	bcc.n	8004114 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	429a      	cmp	r2, r3
 8004112:	d903      	bls.n	800411c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800411a:	e10d      	b.n	8004338 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	2200      	movs	r2, #0
 8004120:	60bb      	str	r3, [r7, #8]
 8004122:	60fa      	str	r2, [r7, #12]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	4a8e      	ldr	r2, [pc, #568]	; (8004364 <UART_SetConfig+0x590>)
 800412a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800412e:	b29b      	uxth	r3, r3
 8004130:	2200      	movs	r2, #0
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	607a      	str	r2, [r7, #4]
 8004136:	e9d7 2300 	ldrd	r2, r3, [r7]
 800413a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800413e:	f7fc fc71 	bl	8000a24 <__aeabi_uldivmod>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4610      	mov	r0, r2
 8004148:	4619      	mov	r1, r3
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	020b      	lsls	r3, r1, #8
 8004154:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004158:	0202      	lsls	r2, r0, #8
 800415a:	6979      	ldr	r1, [r7, #20]
 800415c:	6849      	ldr	r1, [r1, #4]
 800415e:	0849      	lsrs	r1, r1, #1
 8004160:	2000      	movs	r0, #0
 8004162:	460c      	mov	r4, r1
 8004164:	4605      	mov	r5, r0
 8004166:	eb12 0804 	adds.w	r8, r2, r4
 800416a:	eb43 0905 	adc.w	r9, r3, r5
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	469a      	mov	sl, r3
 8004176:	4693      	mov	fp, r2
 8004178:	4652      	mov	r2, sl
 800417a:	465b      	mov	r3, fp
 800417c:	4640      	mov	r0, r8
 800417e:	4649      	mov	r1, r9
 8004180:	f7fc fc50 	bl	8000a24 <__aeabi_uldivmod>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4613      	mov	r3, r2
 800418a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004192:	d308      	bcc.n	80041a6 <UART_SetConfig+0x3d2>
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800419a:	d204      	bcs.n	80041a6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6a3a      	ldr	r2, [r7, #32]
 80041a2:	60da      	str	r2, [r3, #12]
 80041a4:	e0c8      	b.n	8004338 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80041ac:	e0c4      	b.n	8004338 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b6:	d167      	bne.n	8004288 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80041b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d828      	bhi.n	8004212 <UART_SetConfig+0x43e>
 80041c0:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <UART_SetConfig+0x3f4>)
 80041c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c6:	bf00      	nop
 80041c8:	080041ed 	.word	0x080041ed
 80041cc:	080041f5 	.word	0x080041f5
 80041d0:	080041fd 	.word	0x080041fd
 80041d4:	08004213 	.word	0x08004213
 80041d8:	08004203 	.word	0x08004203
 80041dc:	08004213 	.word	0x08004213
 80041e0:	08004213 	.word	0x08004213
 80041e4:	08004213 	.word	0x08004213
 80041e8:	0800420b 	.word	0x0800420b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041ec:	f7fe fa10 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 80041f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041f2:	e014      	b.n	800421e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f4:	f7fe fa22 	bl	800263c <HAL_RCC_GetPCLK2Freq>
 80041f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041fa:	e010      	b.n	800421e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041fc:	4b5a      	ldr	r3, [pc, #360]	; (8004368 <UART_SetConfig+0x594>)
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004200:	e00d      	b.n	800421e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004202:	f7fe f997 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8004206:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004208:	e009      	b.n	800421e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004210:	e005      	b.n	800421e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800421c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8089 	beq.w	8004338 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	4a4e      	ldr	r2, [pc, #312]	; (8004364 <UART_SetConfig+0x590>)
 800422c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004230:	461a      	mov	r2, r3
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	fbb3 f3f2 	udiv	r3, r3, r2
 8004238:	005a      	lsls	r2, r3, #1
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	085b      	lsrs	r3, r3, #1
 8004240:	441a      	add	r2, r3
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	fbb2 f3f3 	udiv	r3, r2, r3
 800424a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	2b0f      	cmp	r3, #15
 8004250:	d916      	bls.n	8004280 <UART_SetConfig+0x4ac>
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004258:	d212      	bcs.n	8004280 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	b29b      	uxth	r3, r3
 800425e:	f023 030f 	bic.w	r3, r3, #15
 8004262:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	085b      	lsrs	r3, r3, #1
 8004268:	b29b      	uxth	r3, r3
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	b29a      	uxth	r2, r3
 8004270:	8bfb      	ldrh	r3, [r7, #30]
 8004272:	4313      	orrs	r3, r2
 8004274:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	8bfa      	ldrh	r2, [r7, #30]
 800427c:	60da      	str	r2, [r3, #12]
 800427e:	e05b      	b.n	8004338 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004286:	e057      	b.n	8004338 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004288:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800428c:	2b08      	cmp	r3, #8
 800428e:	d828      	bhi.n	80042e2 <UART_SetConfig+0x50e>
 8004290:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <UART_SetConfig+0x4c4>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042bd 	.word	0x080042bd
 800429c:	080042c5 	.word	0x080042c5
 80042a0:	080042cd 	.word	0x080042cd
 80042a4:	080042e3 	.word	0x080042e3
 80042a8:	080042d3 	.word	0x080042d3
 80042ac:	080042e3 	.word	0x080042e3
 80042b0:	080042e3 	.word	0x080042e3
 80042b4:	080042e3 	.word	0x080042e3
 80042b8:	080042db 	.word	0x080042db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042bc:	f7fe f9a8 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 80042c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042c2:	e014      	b.n	80042ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042c4:	f7fe f9ba 	bl	800263c <HAL_RCC_GetPCLK2Freq>
 80042c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042ca:	e010      	b.n	80042ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042cc:	4b26      	ldr	r3, [pc, #152]	; (8004368 <UART_SetConfig+0x594>)
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042d0:	e00d      	b.n	80042ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042d2:	f7fe f92f 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80042d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042d8:	e009      	b.n	80042ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042e0:	e005      	b.n	80042ee <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80042ec:	bf00      	nop
    }

    if (pclk != 0U)
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d021      	beq.n	8004338 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	4a1a      	ldr	r2, [pc, #104]	; (8004364 <UART_SetConfig+0x590>)
 80042fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042fe:	461a      	mov	r2, r3
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	fbb3 f2f2 	udiv	r2, r3, r2
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	085b      	lsrs	r3, r3, #1
 800430c:	441a      	add	r2, r3
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	fbb2 f3f3 	udiv	r3, r2, r3
 8004316:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	2b0f      	cmp	r3, #15
 800431c:	d909      	bls.n	8004332 <UART_SetConfig+0x55e>
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004324:	d205      	bcs.n	8004332 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	b29a      	uxth	r2, r3
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60da      	str	r2, [r3, #12]
 8004330:	e002      	b.n	8004338 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2201      	movs	r2, #1
 800433c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2201      	movs	r2, #1
 8004344:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	2200      	movs	r2, #0
 800434c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2200      	movs	r2, #0
 8004352:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004354:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004358:	4618      	mov	r0, r3
 800435a:	3730      	adds	r7, #48	; 0x30
 800435c:	46bd      	mov	sp, r7
 800435e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004362:	bf00      	nop
 8004364:	080059e8 	.word	0x080059e8
 8004368:	00f42400 	.word	0x00f42400

0800436c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00a      	beq.n	80043da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00a      	beq.n	800441e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01a      	beq.n	8004482 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800446a:	d10a      	bne.n	8004482 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	605a      	str	r2, [r3, #4]
  }
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044c0:	f7fd f8a6 	bl	8001610 <HAL_GetTick>
 80044c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d10e      	bne.n	80044f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f82f 	bl	8004546 <UART_WaitOnFlagUntilTimeout>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e025      	b.n	800453e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d10e      	bne.n	800451e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004500:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f819 	bl	8004546 <UART_WaitOnFlagUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e00f      	b.n	800453e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b09c      	sub	sp, #112	; 0x70
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	4613      	mov	r3, r2
 8004554:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004556:	e0a9      	b.n	80046ac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	f000 80a5 	beq.w	80046ac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004562:	f7fd f855 	bl	8001610 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800456e:	429a      	cmp	r2, r3
 8004570:	d302      	bcc.n	8004578 <UART_WaitOnFlagUntilTimeout+0x32>
 8004572:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004574:	2b00      	cmp	r3, #0
 8004576:	d140      	bne.n	80045fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004580:	e853 3f00 	ldrex	r3, [r3]
 8004584:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004588:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800458c:	667b      	str	r3, [r7, #100]	; 0x64
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004596:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004598:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800459c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800459e:	e841 2300 	strex	r3, r2, [r1]
 80045a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80045a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1e6      	bne.n	8004578 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3308      	adds	r3, #8
 80045b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045bc:	f023 0301 	bic.w	r3, r3, #1
 80045c0:	663b      	str	r3, [r7, #96]	; 0x60
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3308      	adds	r3, #8
 80045c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80045cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80045d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e5      	bne.n	80045aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e069      	b.n	80046ce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d051      	beq.n	80046ac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004616:	d149      	bne.n	80046ac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004620:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004636:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004640:	637b      	str	r3, [r7, #52]	; 0x34
 8004642:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e6      	bne.n	8004622 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3308      	adds	r3, #8
 800465a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	613b      	str	r3, [r7, #16]
   return(result);
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	66bb      	str	r3, [r7, #104]	; 0x68
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3308      	adds	r3, #8
 8004672:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004674:	623a      	str	r2, [r7, #32]
 8004676:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004678:	69f9      	ldr	r1, [r7, #28]
 800467a:	6a3a      	ldr	r2, [r7, #32]
 800467c:	e841 2300 	strex	r3, r2, [r1]
 8004680:	61bb      	str	r3, [r7, #24]
   return(result);
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e5      	bne.n	8004654 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e010      	b.n	80046ce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	69da      	ldr	r2, [r3, #28]
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	4013      	ands	r3, r2
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	bf0c      	ite	eq
 80046bc:	2301      	moveq	r3, #1
 80046be:	2300      	movne	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	461a      	mov	r2, r3
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	f43f af46 	beq.w	8004558 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3770      	adds	r7, #112	; 0x70
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b085      	sub	sp, #20
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_UARTEx_DisableFifoMode+0x16>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e027      	b.n	800473c <HAL_UARTEx_DisableFifoMode+0x66>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2224      	movs	r2, #36	; 0x24
 80046f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800471a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2220      	movs	r2, #32
 800472e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800475c:	2302      	movs	r3, #2
 800475e:	e02d      	b.n	80047bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2224      	movs	r2, #36	; 0x24
 800476c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0201 	bic.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f84f 	bl	8004840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80047d8:	2302      	movs	r3, #2
 80047da:	e02d      	b.n	8004838 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2224      	movs	r2, #36	; 0x24
 80047e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f811 	bl	8004840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2220      	movs	r2, #32
 800482a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800484c:	2b00      	cmp	r3, #0
 800484e:	d108      	bne.n	8004862 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004860:	e031      	b.n	80048c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004862:	2308      	movs	r3, #8
 8004864:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004866:	2308      	movs	r3, #8
 8004868:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	0e5b      	lsrs	r3, r3, #25
 8004872:	b2db      	uxtb	r3, r3
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	0f5b      	lsrs	r3, r3, #29
 8004882:	b2db      	uxtb	r3, r3
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800488a:	7bbb      	ldrb	r3, [r7, #14]
 800488c:	7b3a      	ldrb	r2, [r7, #12]
 800488e:	4911      	ldr	r1, [pc, #68]	; (80048d4 <UARTEx_SetNbDataToProcess+0x94>)
 8004890:	5c8a      	ldrb	r2, [r1, r2]
 8004892:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004896:	7b3a      	ldrb	r2, [r7, #12]
 8004898:	490f      	ldr	r1, [pc, #60]	; (80048d8 <UARTEx_SetNbDataToProcess+0x98>)
 800489a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800489c:	fb93 f3f2 	sdiv	r3, r3, r2
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	7b7a      	ldrb	r2, [r7, #13]
 80048ac:	4909      	ldr	r1, [pc, #36]	; (80048d4 <UARTEx_SetNbDataToProcess+0x94>)
 80048ae:	5c8a      	ldrb	r2, [r1, r2]
 80048b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80048b4:	7b7a      	ldrb	r2, [r7, #13]
 80048b6:	4908      	ldr	r1, [pc, #32]	; (80048d8 <UARTEx_SetNbDataToProcess+0x98>)
 80048b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80048be:	b29a      	uxth	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80048c6:	bf00      	nop
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	08005a00 	.word	0x08005a00
 80048d8:	08005a08 	.word	0x08005a08

080048dc <memset>:
 80048dc:	4402      	add	r2, r0
 80048de:	4603      	mov	r3, r0
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d100      	bne.n	80048e6 <memset+0xa>
 80048e4:	4770      	bx	lr
 80048e6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ea:	e7f9      	b.n	80048e0 <memset+0x4>

080048ec <__libc_init_array>:
 80048ec:	b570      	push	{r4, r5, r6, lr}
 80048ee:	4d0d      	ldr	r5, [pc, #52]	; (8004924 <__libc_init_array+0x38>)
 80048f0:	4c0d      	ldr	r4, [pc, #52]	; (8004928 <__libc_init_array+0x3c>)
 80048f2:	1b64      	subs	r4, r4, r5
 80048f4:	10a4      	asrs	r4, r4, #2
 80048f6:	2600      	movs	r6, #0
 80048f8:	42a6      	cmp	r6, r4
 80048fa:	d109      	bne.n	8004910 <__libc_init_array+0x24>
 80048fc:	4d0b      	ldr	r5, [pc, #44]	; (800492c <__libc_init_array+0x40>)
 80048fe:	4c0c      	ldr	r4, [pc, #48]	; (8004930 <__libc_init_array+0x44>)
 8004900:	f001 f85a 	bl	80059b8 <_init>
 8004904:	1b64      	subs	r4, r4, r5
 8004906:	10a4      	asrs	r4, r4, #2
 8004908:	2600      	movs	r6, #0
 800490a:	42a6      	cmp	r6, r4
 800490c:	d105      	bne.n	800491a <__libc_init_array+0x2e>
 800490e:	bd70      	pop	{r4, r5, r6, pc}
 8004910:	f855 3b04 	ldr.w	r3, [r5], #4
 8004914:	4798      	blx	r3
 8004916:	3601      	adds	r6, #1
 8004918:	e7ee      	b.n	80048f8 <__libc_init_array+0xc>
 800491a:	f855 3b04 	ldr.w	r3, [r5], #4
 800491e:	4798      	blx	r3
 8004920:	3601      	adds	r6, #1
 8004922:	e7f2      	b.n	800490a <__libc_init_array+0x1e>
 8004924:	08005bf0 	.word	0x08005bf0
 8004928:	08005bf0 	.word	0x08005bf0
 800492c:	08005bf0 	.word	0x08005bf0
 8004930:	08005bf4 	.word	0x08005bf4
 8004934:	00000000 	.word	0x00000000

08004938 <sin>:
 8004938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800493a:	ec53 2b10 	vmov	r2, r3, d0
 800493e:	4828      	ldr	r0, [pc, #160]	; (80049e0 <sin+0xa8>)
 8004940:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004944:	4281      	cmp	r1, r0
 8004946:	dc07      	bgt.n	8004958 <sin+0x20>
 8004948:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80049d8 <sin+0xa0>
 800494c:	2000      	movs	r0, #0
 800494e:	b005      	add	sp, #20
 8004950:	f85d eb04 	ldr.w	lr, [sp], #4
 8004954:	f000 b910 	b.w	8004b78 <__kernel_sin>
 8004958:	4822      	ldr	r0, [pc, #136]	; (80049e4 <sin+0xac>)
 800495a:	4281      	cmp	r1, r0
 800495c:	dd09      	ble.n	8004972 <sin+0x3a>
 800495e:	ee10 0a10 	vmov	r0, s0
 8004962:	4619      	mov	r1, r3
 8004964:	f7fb fd86 	bl	8000474 <__aeabi_dsub>
 8004968:	ec41 0b10 	vmov	d0, r0, r1
 800496c:	b005      	add	sp, #20
 800496e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004972:	4668      	mov	r0, sp
 8004974:	f000 f9c0 	bl	8004cf8 <__ieee754_rem_pio2>
 8004978:	f000 0003 	and.w	r0, r0, #3
 800497c:	2801      	cmp	r0, #1
 800497e:	d00c      	beq.n	800499a <sin+0x62>
 8004980:	2802      	cmp	r0, #2
 8004982:	d011      	beq.n	80049a8 <sin+0x70>
 8004984:	b9f0      	cbnz	r0, 80049c4 <sin+0x8c>
 8004986:	ed9d 1b02 	vldr	d1, [sp, #8]
 800498a:	ed9d 0b00 	vldr	d0, [sp]
 800498e:	2001      	movs	r0, #1
 8004990:	f000 f8f2 	bl	8004b78 <__kernel_sin>
 8004994:	ec51 0b10 	vmov	r0, r1, d0
 8004998:	e7e6      	b.n	8004968 <sin+0x30>
 800499a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800499e:	ed9d 0b00 	vldr	d0, [sp]
 80049a2:	f000 f821 	bl	80049e8 <__kernel_cos>
 80049a6:	e7f5      	b.n	8004994 <sin+0x5c>
 80049a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80049ac:	ed9d 0b00 	vldr	d0, [sp]
 80049b0:	2001      	movs	r0, #1
 80049b2:	f000 f8e1 	bl	8004b78 <__kernel_sin>
 80049b6:	ec53 2b10 	vmov	r2, r3, d0
 80049ba:	ee10 0a10 	vmov	r0, s0
 80049be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80049c2:	e7d1      	b.n	8004968 <sin+0x30>
 80049c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80049c8:	ed9d 0b00 	vldr	d0, [sp]
 80049cc:	f000 f80c 	bl	80049e8 <__kernel_cos>
 80049d0:	e7f1      	b.n	80049b6 <sin+0x7e>
 80049d2:	bf00      	nop
 80049d4:	f3af 8000 	nop.w
	...
 80049e0:	3fe921fb 	.word	0x3fe921fb
 80049e4:	7fefffff 	.word	0x7fefffff

080049e8 <__kernel_cos>:
 80049e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ec:	ec57 6b10 	vmov	r6, r7, d0
 80049f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80049f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80049f8:	ed8d 1b00 	vstr	d1, [sp]
 80049fc:	da07      	bge.n	8004a0e <__kernel_cos+0x26>
 80049fe:	ee10 0a10 	vmov	r0, s0
 8004a02:	4639      	mov	r1, r7
 8004a04:	f7fb ff76 	bl	80008f4 <__aeabi_d2iz>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	f000 8088 	beq.w	8004b1e <__kernel_cos+0x136>
 8004a0e:	4632      	mov	r2, r6
 8004a10:	463b      	mov	r3, r7
 8004a12:	4630      	mov	r0, r6
 8004a14:	4639      	mov	r1, r7
 8004a16:	f7fb fbff 	bl	8000218 <__aeabi_dmul>
 8004a1a:	4b51      	ldr	r3, [pc, #324]	; (8004b60 <__kernel_cos+0x178>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	4604      	mov	r4, r0
 8004a20:	460d      	mov	r5, r1
 8004a22:	f7fb fbf9 	bl	8000218 <__aeabi_dmul>
 8004a26:	a340      	add	r3, pc, #256	; (adr r3, 8004b28 <__kernel_cos+0x140>)
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	4682      	mov	sl, r0
 8004a2e:	468b      	mov	fp, r1
 8004a30:	4620      	mov	r0, r4
 8004a32:	4629      	mov	r1, r5
 8004a34:	f7fb fbf0 	bl	8000218 <__aeabi_dmul>
 8004a38:	a33d      	add	r3, pc, #244	; (adr r3, 8004b30 <__kernel_cos+0x148>)
 8004a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3e:	f7fb fd1b 	bl	8000478 <__adddf3>
 8004a42:	4622      	mov	r2, r4
 8004a44:	462b      	mov	r3, r5
 8004a46:	f7fb fbe7 	bl	8000218 <__aeabi_dmul>
 8004a4a:	a33b      	add	r3, pc, #236	; (adr r3, 8004b38 <__kernel_cos+0x150>)
 8004a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a50:	f7fb fd10 	bl	8000474 <__aeabi_dsub>
 8004a54:	4622      	mov	r2, r4
 8004a56:	462b      	mov	r3, r5
 8004a58:	f7fb fbde 	bl	8000218 <__aeabi_dmul>
 8004a5c:	a338      	add	r3, pc, #224	; (adr r3, 8004b40 <__kernel_cos+0x158>)
 8004a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a62:	f7fb fd09 	bl	8000478 <__adddf3>
 8004a66:	4622      	mov	r2, r4
 8004a68:	462b      	mov	r3, r5
 8004a6a:	f7fb fbd5 	bl	8000218 <__aeabi_dmul>
 8004a6e:	a336      	add	r3, pc, #216	; (adr r3, 8004b48 <__kernel_cos+0x160>)
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	f7fb fcfe 	bl	8000474 <__aeabi_dsub>
 8004a78:	4622      	mov	r2, r4
 8004a7a:	462b      	mov	r3, r5
 8004a7c:	f7fb fbcc 	bl	8000218 <__aeabi_dmul>
 8004a80:	a333      	add	r3, pc, #204	; (adr r3, 8004b50 <__kernel_cos+0x168>)
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	f7fb fcf7 	bl	8000478 <__adddf3>
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	f7fb fbc3 	bl	8000218 <__aeabi_dmul>
 8004a92:	4622      	mov	r2, r4
 8004a94:	462b      	mov	r3, r5
 8004a96:	f7fb fbbf 	bl	8000218 <__aeabi_dmul>
 8004a9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	460d      	mov	r5, r1
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	4639      	mov	r1, r7
 8004aa6:	f7fb fbb7 	bl	8000218 <__aeabi_dmul>
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4602      	mov	r2, r0
 8004aae:	4629      	mov	r1, r5
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	f7fb fcdf 	bl	8000474 <__aeabi_dsub>
 8004ab6:	4b2b      	ldr	r3, [pc, #172]	; (8004b64 <__kernel_cos+0x17c>)
 8004ab8:	4598      	cmp	r8, r3
 8004aba:	4606      	mov	r6, r0
 8004abc:	460f      	mov	r7, r1
 8004abe:	dc10      	bgt.n	8004ae2 <__kernel_cos+0xfa>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4650      	mov	r0, sl
 8004ac6:	4659      	mov	r1, fp
 8004ac8:	f7fb fcd4 	bl	8000474 <__aeabi_dsub>
 8004acc:	460b      	mov	r3, r1
 8004ace:	4926      	ldr	r1, [pc, #152]	; (8004b68 <__kernel_cos+0x180>)
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	f7fb fcce 	bl	8000474 <__aeabi_dsub>
 8004ad8:	ec41 0b10 	vmov	d0, r0, r1
 8004adc:	b003      	add	sp, #12
 8004ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae2:	4b22      	ldr	r3, [pc, #136]	; (8004b6c <__kernel_cos+0x184>)
 8004ae4:	4920      	ldr	r1, [pc, #128]	; (8004b68 <__kernel_cos+0x180>)
 8004ae6:	4598      	cmp	r8, r3
 8004ae8:	bfcc      	ite	gt
 8004aea:	4d21      	ldrgt	r5, [pc, #132]	; (8004b70 <__kernel_cos+0x188>)
 8004aec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004af0:	2400      	movs	r4, #0
 8004af2:	4622      	mov	r2, r4
 8004af4:	462b      	mov	r3, r5
 8004af6:	2000      	movs	r0, #0
 8004af8:	f7fb fcbc 	bl	8000474 <__aeabi_dsub>
 8004afc:	4622      	mov	r2, r4
 8004afe:	4680      	mov	r8, r0
 8004b00:	4689      	mov	r9, r1
 8004b02:	462b      	mov	r3, r5
 8004b04:	4650      	mov	r0, sl
 8004b06:	4659      	mov	r1, fp
 8004b08:	f7fb fcb4 	bl	8000474 <__aeabi_dsub>
 8004b0c:	4632      	mov	r2, r6
 8004b0e:	463b      	mov	r3, r7
 8004b10:	f7fb fcb0 	bl	8000474 <__aeabi_dsub>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4640      	mov	r0, r8
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	e7da      	b.n	8004ad4 <__kernel_cos+0xec>
 8004b1e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004b58 <__kernel_cos+0x170>
 8004b22:	e7db      	b.n	8004adc <__kernel_cos+0xf4>
 8004b24:	f3af 8000 	nop.w
 8004b28:	be8838d4 	.word	0xbe8838d4
 8004b2c:	bda8fae9 	.word	0xbda8fae9
 8004b30:	bdb4b1c4 	.word	0xbdb4b1c4
 8004b34:	3e21ee9e 	.word	0x3e21ee9e
 8004b38:	809c52ad 	.word	0x809c52ad
 8004b3c:	3e927e4f 	.word	0x3e927e4f
 8004b40:	19cb1590 	.word	0x19cb1590
 8004b44:	3efa01a0 	.word	0x3efa01a0
 8004b48:	16c15177 	.word	0x16c15177
 8004b4c:	3f56c16c 	.word	0x3f56c16c
 8004b50:	5555554c 	.word	0x5555554c
 8004b54:	3fa55555 	.word	0x3fa55555
 8004b58:	00000000 	.word	0x00000000
 8004b5c:	3ff00000 	.word	0x3ff00000
 8004b60:	3fe00000 	.word	0x3fe00000
 8004b64:	3fd33332 	.word	0x3fd33332
 8004b68:	3ff00000 	.word	0x3ff00000
 8004b6c:	3fe90000 	.word	0x3fe90000
 8004b70:	3fd20000 	.word	0x3fd20000
 8004b74:	00000000 	.word	0x00000000

08004b78 <__kernel_sin>:
 8004b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7c:	ed2d 8b04 	vpush	{d8-d9}
 8004b80:	eeb0 8a41 	vmov.f32	s16, s2
 8004b84:	eef0 8a61 	vmov.f32	s17, s3
 8004b88:	ec55 4b10 	vmov	r4, r5, d0
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004b92:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004b96:	9001      	str	r0, [sp, #4]
 8004b98:	da06      	bge.n	8004ba8 <__kernel_sin+0x30>
 8004b9a:	ee10 0a10 	vmov	r0, s0
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	f7fb fea8 	bl	80008f4 <__aeabi_d2iz>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	d051      	beq.n	8004c4c <__kernel_sin+0xd4>
 8004ba8:	4622      	mov	r2, r4
 8004baa:	462b      	mov	r3, r5
 8004bac:	4620      	mov	r0, r4
 8004bae:	4629      	mov	r1, r5
 8004bb0:	f7fb fb32 	bl	8000218 <__aeabi_dmul>
 8004bb4:	4682      	mov	sl, r0
 8004bb6:	468b      	mov	fp, r1
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	f7fb fb2a 	bl	8000218 <__aeabi_dmul>
 8004bc4:	a341      	add	r3, pc, #260	; (adr r3, 8004ccc <__kernel_sin+0x154>)
 8004bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bca:	4680      	mov	r8, r0
 8004bcc:	4689      	mov	r9, r1
 8004bce:	4650      	mov	r0, sl
 8004bd0:	4659      	mov	r1, fp
 8004bd2:	f7fb fb21 	bl	8000218 <__aeabi_dmul>
 8004bd6:	a33f      	add	r3, pc, #252	; (adr r3, 8004cd4 <__kernel_sin+0x15c>)
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	f7fb fc4a 	bl	8000474 <__aeabi_dsub>
 8004be0:	4652      	mov	r2, sl
 8004be2:	465b      	mov	r3, fp
 8004be4:	f7fb fb18 	bl	8000218 <__aeabi_dmul>
 8004be8:	a33c      	add	r3, pc, #240	; (adr r3, 8004cdc <__kernel_sin+0x164>)
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	f7fb fc43 	bl	8000478 <__adddf3>
 8004bf2:	4652      	mov	r2, sl
 8004bf4:	465b      	mov	r3, fp
 8004bf6:	f7fb fb0f 	bl	8000218 <__aeabi_dmul>
 8004bfa:	a33a      	add	r3, pc, #232	; (adr r3, 8004ce4 <__kernel_sin+0x16c>)
 8004bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c00:	f7fb fc38 	bl	8000474 <__aeabi_dsub>
 8004c04:	4652      	mov	r2, sl
 8004c06:	465b      	mov	r3, fp
 8004c08:	f7fb fb06 	bl	8000218 <__aeabi_dmul>
 8004c0c:	a337      	add	r3, pc, #220	; (adr r3, 8004cec <__kernel_sin+0x174>)
 8004c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c12:	f7fb fc31 	bl	8000478 <__adddf3>
 8004c16:	9b01      	ldr	r3, [sp, #4]
 8004c18:	4606      	mov	r6, r0
 8004c1a:	460f      	mov	r7, r1
 8004c1c:	b9eb      	cbnz	r3, 8004c5a <__kernel_sin+0xe2>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4650      	mov	r0, sl
 8004c24:	4659      	mov	r1, fp
 8004c26:	f7fb faf7 	bl	8000218 <__aeabi_dmul>
 8004c2a:	a325      	add	r3, pc, #148	; (adr r3, 8004cc0 <__kernel_sin+0x148>)
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	f7fb fc20 	bl	8000474 <__aeabi_dsub>
 8004c34:	4642      	mov	r2, r8
 8004c36:	464b      	mov	r3, r9
 8004c38:	f7fb faee 	bl	8000218 <__aeabi_dmul>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4620      	mov	r0, r4
 8004c42:	4629      	mov	r1, r5
 8004c44:	f7fb fc18 	bl	8000478 <__adddf3>
 8004c48:	4604      	mov	r4, r0
 8004c4a:	460d      	mov	r5, r1
 8004c4c:	ec45 4b10 	vmov	d0, r4, r5
 8004c50:	b003      	add	sp, #12
 8004c52:	ecbd 8b04 	vpop	{d8-d9}
 8004c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c5a:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <__kernel_sin+0x150>)
 8004c5c:	ec51 0b18 	vmov	r0, r1, d8
 8004c60:	2200      	movs	r2, #0
 8004c62:	f7fb fad9 	bl	8000218 <__aeabi_dmul>
 8004c66:	4632      	mov	r2, r6
 8004c68:	ec41 0b19 	vmov	d9, r0, r1
 8004c6c:	463b      	mov	r3, r7
 8004c6e:	4640      	mov	r0, r8
 8004c70:	4649      	mov	r1, r9
 8004c72:	f7fb fad1 	bl	8000218 <__aeabi_dmul>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	ec51 0b19 	vmov	r0, r1, d9
 8004c7e:	f7fb fbf9 	bl	8000474 <__aeabi_dsub>
 8004c82:	4652      	mov	r2, sl
 8004c84:	465b      	mov	r3, fp
 8004c86:	f7fb fac7 	bl	8000218 <__aeabi_dmul>
 8004c8a:	ec53 2b18 	vmov	r2, r3, d8
 8004c8e:	f7fb fbf1 	bl	8000474 <__aeabi_dsub>
 8004c92:	a30b      	add	r3, pc, #44	; (adr r3, 8004cc0 <__kernel_sin+0x148>)
 8004c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c98:	4606      	mov	r6, r0
 8004c9a:	460f      	mov	r7, r1
 8004c9c:	4640      	mov	r0, r8
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	f7fb faba 	bl	8000218 <__aeabi_dmul>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4630      	mov	r0, r6
 8004caa:	4639      	mov	r1, r7
 8004cac:	f7fb fbe4 	bl	8000478 <__adddf3>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	f7fb fbdc 	bl	8000474 <__aeabi_dsub>
 8004cbc:	e7c4      	b.n	8004c48 <__kernel_sin+0xd0>
 8004cbe:	bf00      	nop
 8004cc0:	55555549 	.word	0x55555549
 8004cc4:	3fc55555 	.word	0x3fc55555
 8004cc8:	3fe00000 	.word	0x3fe00000
 8004ccc:	5acfd57c 	.word	0x5acfd57c
 8004cd0:	3de5d93a 	.word	0x3de5d93a
 8004cd4:	8a2b9ceb 	.word	0x8a2b9ceb
 8004cd8:	3e5ae5e6 	.word	0x3e5ae5e6
 8004cdc:	57b1fe7d 	.word	0x57b1fe7d
 8004ce0:	3ec71de3 	.word	0x3ec71de3
 8004ce4:	19c161d5 	.word	0x19c161d5
 8004ce8:	3f2a01a0 	.word	0x3f2a01a0
 8004cec:	1110f8a6 	.word	0x1110f8a6
 8004cf0:	3f811111 	.word	0x3f811111
 8004cf4:	00000000 	.word	0x00000000

08004cf8 <__ieee754_rem_pio2>:
 8004cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cfc:	ed2d 8b02 	vpush	{d8}
 8004d00:	ec55 4b10 	vmov	r4, r5, d0
 8004d04:	4bca      	ldr	r3, [pc, #808]	; (8005030 <__ieee754_rem_pio2+0x338>)
 8004d06:	b08b      	sub	sp, #44	; 0x2c
 8004d08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004d0c:	4598      	cmp	r8, r3
 8004d0e:	4682      	mov	sl, r0
 8004d10:	9502      	str	r5, [sp, #8]
 8004d12:	dc08      	bgt.n	8004d26 <__ieee754_rem_pio2+0x2e>
 8004d14:	2200      	movs	r2, #0
 8004d16:	2300      	movs	r3, #0
 8004d18:	ed80 0b00 	vstr	d0, [r0]
 8004d1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004d20:	f04f 0b00 	mov.w	fp, #0
 8004d24:	e028      	b.n	8004d78 <__ieee754_rem_pio2+0x80>
 8004d26:	4bc3      	ldr	r3, [pc, #780]	; (8005034 <__ieee754_rem_pio2+0x33c>)
 8004d28:	4598      	cmp	r8, r3
 8004d2a:	dc78      	bgt.n	8004e1e <__ieee754_rem_pio2+0x126>
 8004d2c:	9b02      	ldr	r3, [sp, #8]
 8004d2e:	4ec2      	ldr	r6, [pc, #776]	; (8005038 <__ieee754_rem_pio2+0x340>)
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	ee10 0a10 	vmov	r0, s0
 8004d36:	a3b0      	add	r3, pc, #704	; (adr r3, 8004ff8 <__ieee754_rem_pio2+0x300>)
 8004d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	dd39      	ble.n	8004db4 <__ieee754_rem_pio2+0xbc>
 8004d40:	f7fb fb98 	bl	8000474 <__aeabi_dsub>
 8004d44:	45b0      	cmp	r8, r6
 8004d46:	4604      	mov	r4, r0
 8004d48:	460d      	mov	r5, r1
 8004d4a:	d01b      	beq.n	8004d84 <__ieee754_rem_pio2+0x8c>
 8004d4c:	a3ac      	add	r3, pc, #688	; (adr r3, 8005000 <__ieee754_rem_pio2+0x308>)
 8004d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d52:	f7fb fb8f 	bl	8000474 <__aeabi_dsub>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	e9ca 2300 	strd	r2, r3, [sl]
 8004d5e:	4620      	mov	r0, r4
 8004d60:	4629      	mov	r1, r5
 8004d62:	f7fb fb87 	bl	8000474 <__aeabi_dsub>
 8004d66:	a3a6      	add	r3, pc, #664	; (adr r3, 8005000 <__ieee754_rem_pio2+0x308>)
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	f7fb fb82 	bl	8000474 <__aeabi_dsub>
 8004d70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004d74:	f04f 0b01 	mov.w	fp, #1
 8004d78:	4658      	mov	r0, fp
 8004d7a:	b00b      	add	sp, #44	; 0x2c
 8004d7c:	ecbd 8b02 	vpop	{d8}
 8004d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d84:	a3a0      	add	r3, pc, #640	; (adr r3, 8005008 <__ieee754_rem_pio2+0x310>)
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	f7fb fb73 	bl	8000474 <__aeabi_dsub>
 8004d8e:	a3a0      	add	r3, pc, #640	; (adr r3, 8005010 <__ieee754_rem_pio2+0x318>)
 8004d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d94:	4604      	mov	r4, r0
 8004d96:	460d      	mov	r5, r1
 8004d98:	f7fb fb6c 	bl	8000474 <__aeabi_dsub>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	e9ca 2300 	strd	r2, r3, [sl]
 8004da4:	4620      	mov	r0, r4
 8004da6:	4629      	mov	r1, r5
 8004da8:	f7fb fb64 	bl	8000474 <__aeabi_dsub>
 8004dac:	a398      	add	r3, pc, #608	; (adr r3, 8005010 <__ieee754_rem_pio2+0x318>)
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	e7db      	b.n	8004d6c <__ieee754_rem_pio2+0x74>
 8004db4:	f7fb fb60 	bl	8000478 <__adddf3>
 8004db8:	45b0      	cmp	r8, r6
 8004dba:	4604      	mov	r4, r0
 8004dbc:	460d      	mov	r5, r1
 8004dbe:	d016      	beq.n	8004dee <__ieee754_rem_pio2+0xf6>
 8004dc0:	a38f      	add	r3, pc, #572	; (adr r3, 8005000 <__ieee754_rem_pio2+0x308>)
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	f7fb fb57 	bl	8000478 <__adddf3>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	e9ca 2300 	strd	r2, r3, [sl]
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	f7fb fb4d 	bl	8000474 <__aeabi_dsub>
 8004dda:	a389      	add	r3, pc, #548	; (adr r3, 8005000 <__ieee754_rem_pio2+0x308>)
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f7fb fb4a 	bl	8000478 <__adddf3>
 8004de4:	f04f 3bff 	mov.w	fp, #4294967295
 8004de8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004dec:	e7c4      	b.n	8004d78 <__ieee754_rem_pio2+0x80>
 8004dee:	a386      	add	r3, pc, #536	; (adr r3, 8005008 <__ieee754_rem_pio2+0x310>)
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	f7fb fb40 	bl	8000478 <__adddf3>
 8004df8:	a385      	add	r3, pc, #532	; (adr r3, 8005010 <__ieee754_rem_pio2+0x318>)
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	4604      	mov	r4, r0
 8004e00:	460d      	mov	r5, r1
 8004e02:	f7fb fb39 	bl	8000478 <__adddf3>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	e9ca 2300 	strd	r2, r3, [sl]
 8004e0e:	4620      	mov	r0, r4
 8004e10:	4629      	mov	r1, r5
 8004e12:	f7fb fb2f 	bl	8000474 <__aeabi_dsub>
 8004e16:	a37e      	add	r3, pc, #504	; (adr r3, 8005010 <__ieee754_rem_pio2+0x318>)
 8004e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1c:	e7e0      	b.n	8004de0 <__ieee754_rem_pio2+0xe8>
 8004e1e:	4b87      	ldr	r3, [pc, #540]	; (800503c <__ieee754_rem_pio2+0x344>)
 8004e20:	4598      	cmp	r8, r3
 8004e22:	f300 80d8 	bgt.w	8004fd6 <__ieee754_rem_pio2+0x2de>
 8004e26:	f000 f96d 	bl	8005104 <fabs>
 8004e2a:	ec55 4b10 	vmov	r4, r5, d0
 8004e2e:	ee10 0a10 	vmov	r0, s0
 8004e32:	a379      	add	r3, pc, #484	; (adr r3, 8005018 <__ieee754_rem_pio2+0x320>)
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	4629      	mov	r1, r5
 8004e3a:	f7fb f9ed 	bl	8000218 <__aeabi_dmul>
 8004e3e:	4b80      	ldr	r3, [pc, #512]	; (8005040 <__ieee754_rem_pio2+0x348>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	f7fb fb19 	bl	8000478 <__adddf3>
 8004e46:	f7fb fd55 	bl	80008f4 <__aeabi_d2iz>
 8004e4a:	4683      	mov	fp, r0
 8004e4c:	f7fb fc60 	bl	8000710 <__aeabi_i2d>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	ec43 2b18 	vmov	d8, r2, r3
 8004e58:	a367      	add	r3, pc, #412	; (adr r3, 8004ff8 <__ieee754_rem_pio2+0x300>)
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	f7fb f9db 	bl	8000218 <__aeabi_dmul>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4620      	mov	r0, r4
 8004e68:	4629      	mov	r1, r5
 8004e6a:	f7fb fb03 	bl	8000474 <__aeabi_dsub>
 8004e6e:	a364      	add	r3, pc, #400	; (adr r3, 8005000 <__ieee754_rem_pio2+0x308>)
 8004e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e74:	4606      	mov	r6, r0
 8004e76:	460f      	mov	r7, r1
 8004e78:	ec51 0b18 	vmov	r0, r1, d8
 8004e7c:	f7fb f9cc 	bl	8000218 <__aeabi_dmul>
 8004e80:	f1bb 0f1f 	cmp.w	fp, #31
 8004e84:	4604      	mov	r4, r0
 8004e86:	460d      	mov	r5, r1
 8004e88:	dc0d      	bgt.n	8004ea6 <__ieee754_rem_pio2+0x1ae>
 8004e8a:	4b6e      	ldr	r3, [pc, #440]	; (8005044 <__ieee754_rem_pio2+0x34c>)
 8004e8c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e94:	4543      	cmp	r3, r8
 8004e96:	d006      	beq.n	8004ea6 <__ieee754_rem_pio2+0x1ae>
 8004e98:	4622      	mov	r2, r4
 8004e9a:	462b      	mov	r3, r5
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	4639      	mov	r1, r7
 8004ea0:	f7fb fae8 	bl	8000474 <__aeabi_dsub>
 8004ea4:	e00e      	b.n	8004ec4 <__ieee754_rem_pio2+0x1cc>
 8004ea6:	462b      	mov	r3, r5
 8004ea8:	4622      	mov	r2, r4
 8004eaa:	4630      	mov	r0, r6
 8004eac:	4639      	mov	r1, r7
 8004eae:	f7fb fae1 	bl	8000474 <__aeabi_dsub>
 8004eb2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004eb6:	9303      	str	r3, [sp, #12]
 8004eb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004ebc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004ec0:	2b10      	cmp	r3, #16
 8004ec2:	dc02      	bgt.n	8004eca <__ieee754_rem_pio2+0x1d2>
 8004ec4:	e9ca 0100 	strd	r0, r1, [sl]
 8004ec8:	e039      	b.n	8004f3e <__ieee754_rem_pio2+0x246>
 8004eca:	a34f      	add	r3, pc, #316	; (adr r3, 8005008 <__ieee754_rem_pio2+0x310>)
 8004ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed0:	ec51 0b18 	vmov	r0, r1, d8
 8004ed4:	f7fb f9a0 	bl	8000218 <__aeabi_dmul>
 8004ed8:	4604      	mov	r4, r0
 8004eda:	460d      	mov	r5, r1
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	4639      	mov	r1, r7
 8004ee4:	f7fb fac6 	bl	8000474 <__aeabi_dsub>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4680      	mov	r8, r0
 8004eee:	4689      	mov	r9, r1
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	4639      	mov	r1, r7
 8004ef4:	f7fb fabe 	bl	8000474 <__aeabi_dsub>
 8004ef8:	4622      	mov	r2, r4
 8004efa:	462b      	mov	r3, r5
 8004efc:	f7fb faba 	bl	8000474 <__aeabi_dsub>
 8004f00:	a343      	add	r3, pc, #268	; (adr r3, 8005010 <__ieee754_rem_pio2+0x318>)
 8004f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f06:	4604      	mov	r4, r0
 8004f08:	460d      	mov	r5, r1
 8004f0a:	ec51 0b18 	vmov	r0, r1, d8
 8004f0e:	f7fb f983 	bl	8000218 <__aeabi_dmul>
 8004f12:	4622      	mov	r2, r4
 8004f14:	462b      	mov	r3, r5
 8004f16:	f7fb faad 	bl	8000474 <__aeabi_dsub>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4604      	mov	r4, r0
 8004f20:	460d      	mov	r5, r1
 8004f22:	4640      	mov	r0, r8
 8004f24:	4649      	mov	r1, r9
 8004f26:	f7fb faa5 	bl	8000474 <__aeabi_dsub>
 8004f2a:	9a03      	ldr	r2, [sp, #12]
 8004f2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b31      	cmp	r3, #49	; 0x31
 8004f34:	dc24      	bgt.n	8004f80 <__ieee754_rem_pio2+0x288>
 8004f36:	e9ca 0100 	strd	r0, r1, [sl]
 8004f3a:	4646      	mov	r6, r8
 8004f3c:	464f      	mov	r7, r9
 8004f3e:	e9da 8900 	ldrd	r8, r9, [sl]
 8004f42:	4630      	mov	r0, r6
 8004f44:	4642      	mov	r2, r8
 8004f46:	464b      	mov	r3, r9
 8004f48:	4639      	mov	r1, r7
 8004f4a:	f7fb fa93 	bl	8000474 <__aeabi_dsub>
 8004f4e:	462b      	mov	r3, r5
 8004f50:	4622      	mov	r2, r4
 8004f52:	f7fb fa8f 	bl	8000474 <__aeabi_dsub>
 8004f56:	9b02      	ldr	r3, [sp, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004f5e:	f6bf af0b 	bge.w	8004d78 <__ieee754_rem_pio2+0x80>
 8004f62:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004f66:	f8ca 3004 	str.w	r3, [sl, #4]
 8004f6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f6e:	f8ca 8000 	str.w	r8, [sl]
 8004f72:	f8ca 0008 	str.w	r0, [sl, #8]
 8004f76:	f8ca 300c 	str.w	r3, [sl, #12]
 8004f7a:	f1cb 0b00 	rsb	fp, fp, #0
 8004f7e:	e6fb      	b.n	8004d78 <__ieee754_rem_pio2+0x80>
 8004f80:	a327      	add	r3, pc, #156	; (adr r3, 8005020 <__ieee754_rem_pio2+0x328>)
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	ec51 0b18 	vmov	r0, r1, d8
 8004f8a:	f7fb f945 	bl	8000218 <__aeabi_dmul>
 8004f8e:	4604      	mov	r4, r0
 8004f90:	460d      	mov	r5, r1
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4640      	mov	r0, r8
 8004f98:	4649      	mov	r1, r9
 8004f9a:	f7fb fa6b 	bl	8000474 <__aeabi_dsub>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4606      	mov	r6, r0
 8004fa4:	460f      	mov	r7, r1
 8004fa6:	4640      	mov	r0, r8
 8004fa8:	4649      	mov	r1, r9
 8004faa:	f7fb fa63 	bl	8000474 <__aeabi_dsub>
 8004fae:	4622      	mov	r2, r4
 8004fb0:	462b      	mov	r3, r5
 8004fb2:	f7fb fa5f 	bl	8000474 <__aeabi_dsub>
 8004fb6:	a31c      	add	r3, pc, #112	; (adr r3, 8005028 <__ieee754_rem_pio2+0x330>)
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	460d      	mov	r5, r1
 8004fc0:	ec51 0b18 	vmov	r0, r1, d8
 8004fc4:	f7fb f928 	bl	8000218 <__aeabi_dmul>
 8004fc8:	4622      	mov	r2, r4
 8004fca:	462b      	mov	r3, r5
 8004fcc:	f7fb fa52 	bl	8000474 <__aeabi_dsub>
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	460d      	mov	r5, r1
 8004fd4:	e760      	b.n	8004e98 <__ieee754_rem_pio2+0x1a0>
 8004fd6:	4b1c      	ldr	r3, [pc, #112]	; (8005048 <__ieee754_rem_pio2+0x350>)
 8004fd8:	4598      	cmp	r8, r3
 8004fda:	dd37      	ble.n	800504c <__ieee754_rem_pio2+0x354>
 8004fdc:	ee10 2a10 	vmov	r2, s0
 8004fe0:	462b      	mov	r3, r5
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	f7fb fa45 	bl	8000474 <__aeabi_dsub>
 8004fea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004fee:	e9ca 0100 	strd	r0, r1, [sl]
 8004ff2:	e695      	b.n	8004d20 <__ieee754_rem_pio2+0x28>
 8004ff4:	f3af 8000 	nop.w
 8004ff8:	54400000 	.word	0x54400000
 8004ffc:	3ff921fb 	.word	0x3ff921fb
 8005000:	1a626331 	.word	0x1a626331
 8005004:	3dd0b461 	.word	0x3dd0b461
 8005008:	1a600000 	.word	0x1a600000
 800500c:	3dd0b461 	.word	0x3dd0b461
 8005010:	2e037073 	.word	0x2e037073
 8005014:	3ba3198a 	.word	0x3ba3198a
 8005018:	6dc9c883 	.word	0x6dc9c883
 800501c:	3fe45f30 	.word	0x3fe45f30
 8005020:	2e000000 	.word	0x2e000000
 8005024:	3ba3198a 	.word	0x3ba3198a
 8005028:	252049c1 	.word	0x252049c1
 800502c:	397b839a 	.word	0x397b839a
 8005030:	3fe921fb 	.word	0x3fe921fb
 8005034:	4002d97b 	.word	0x4002d97b
 8005038:	3ff921fb 	.word	0x3ff921fb
 800503c:	413921fb 	.word	0x413921fb
 8005040:	3fe00000 	.word	0x3fe00000
 8005044:	08005a10 	.word	0x08005a10
 8005048:	7fefffff 	.word	0x7fefffff
 800504c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8005050:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8005054:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8005058:	4620      	mov	r0, r4
 800505a:	460d      	mov	r5, r1
 800505c:	f7fb fc4a 	bl	80008f4 <__aeabi_d2iz>
 8005060:	f7fb fb56 	bl	8000710 <__aeabi_i2d>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4620      	mov	r0, r4
 800506a:	4629      	mov	r1, r5
 800506c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005070:	f7fb fa00 	bl	8000474 <__aeabi_dsub>
 8005074:	4b21      	ldr	r3, [pc, #132]	; (80050fc <__ieee754_rem_pio2+0x404>)
 8005076:	2200      	movs	r2, #0
 8005078:	f7fb f8ce 	bl	8000218 <__aeabi_dmul>
 800507c:	460d      	mov	r5, r1
 800507e:	4604      	mov	r4, r0
 8005080:	f7fb fc38 	bl	80008f4 <__aeabi_d2iz>
 8005084:	f7fb fb44 	bl	8000710 <__aeabi_i2d>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4620      	mov	r0, r4
 800508e:	4629      	mov	r1, r5
 8005090:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005094:	f7fb f9ee 	bl	8000474 <__aeabi_dsub>
 8005098:	4b18      	ldr	r3, [pc, #96]	; (80050fc <__ieee754_rem_pio2+0x404>)
 800509a:	2200      	movs	r2, #0
 800509c:	f7fb f8bc 	bl	8000218 <__aeabi_dmul>
 80050a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80050a4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80050a8:	2703      	movs	r7, #3
 80050aa:	2400      	movs	r4, #0
 80050ac:	2500      	movs	r5, #0
 80050ae:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80050b2:	4622      	mov	r2, r4
 80050b4:	462b      	mov	r3, r5
 80050b6:	46b9      	mov	r9, r7
 80050b8:	3f01      	subs	r7, #1
 80050ba:	f7fb fbe9 	bl	8000890 <__aeabi_dcmpeq>
 80050be:	2800      	cmp	r0, #0
 80050c0:	d1f5      	bne.n	80050ae <__ieee754_rem_pio2+0x3b6>
 80050c2:	4b0f      	ldr	r3, [pc, #60]	; (8005100 <__ieee754_rem_pio2+0x408>)
 80050c4:	9301      	str	r3, [sp, #4]
 80050c6:	2302      	movs	r3, #2
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	4632      	mov	r2, r6
 80050cc:	464b      	mov	r3, r9
 80050ce:	4651      	mov	r1, sl
 80050d0:	a804      	add	r0, sp, #16
 80050d2:	f000 f821 	bl	8005118 <__kernel_rem_pio2>
 80050d6:	9b02      	ldr	r3, [sp, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	4683      	mov	fp, r0
 80050dc:	f6bf ae4c 	bge.w	8004d78 <__ieee754_rem_pio2+0x80>
 80050e0:	e9da 2100 	ldrd	r2, r1, [sl]
 80050e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050e8:	e9ca 2300 	strd	r2, r3, [sl]
 80050ec:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80050f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050f4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80050f8:	e73f      	b.n	8004f7a <__ieee754_rem_pio2+0x282>
 80050fa:	bf00      	nop
 80050fc:	41700000 	.word	0x41700000
 8005100:	08005a90 	.word	0x08005a90

08005104 <fabs>:
 8005104:	ec51 0b10 	vmov	r0, r1, d0
 8005108:	ee10 2a10 	vmov	r2, s0
 800510c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005110:	ec43 2b10 	vmov	d0, r2, r3
 8005114:	4770      	bx	lr
	...

08005118 <__kernel_rem_pio2>:
 8005118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511c:	ed2d 8b02 	vpush	{d8}
 8005120:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005124:	f112 0f14 	cmn.w	r2, #20
 8005128:	9306      	str	r3, [sp, #24]
 800512a:	9104      	str	r1, [sp, #16]
 800512c:	4bc2      	ldr	r3, [pc, #776]	; (8005438 <__kernel_rem_pio2+0x320>)
 800512e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005130:	9009      	str	r0, [sp, #36]	; 0x24
 8005132:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	9b06      	ldr	r3, [sp, #24]
 800513a:	f103 33ff 	add.w	r3, r3, #4294967295
 800513e:	bfa8      	it	ge
 8005140:	1ed4      	subge	r4, r2, #3
 8005142:	9305      	str	r3, [sp, #20]
 8005144:	bfb2      	itee	lt
 8005146:	2400      	movlt	r4, #0
 8005148:	2318      	movge	r3, #24
 800514a:	fb94 f4f3 	sdivge	r4, r4, r3
 800514e:	f06f 0317 	mvn.w	r3, #23
 8005152:	fb04 3303 	mla	r3, r4, r3, r3
 8005156:	eb03 0a02 	add.w	sl, r3, r2
 800515a:	9b00      	ldr	r3, [sp, #0]
 800515c:	9a05      	ldr	r2, [sp, #20]
 800515e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8005428 <__kernel_rem_pio2+0x310>
 8005162:	eb03 0802 	add.w	r8, r3, r2
 8005166:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005168:	1aa7      	subs	r7, r4, r2
 800516a:	ae20      	add	r6, sp, #128	; 0x80
 800516c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005170:	2500      	movs	r5, #0
 8005172:	4545      	cmp	r5, r8
 8005174:	dd13      	ble.n	800519e <__kernel_rem_pio2+0x86>
 8005176:	9b06      	ldr	r3, [sp, #24]
 8005178:	aa20      	add	r2, sp, #128	; 0x80
 800517a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800517e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005182:	f04f 0800 	mov.w	r8, #0
 8005186:	9b00      	ldr	r3, [sp, #0]
 8005188:	4598      	cmp	r8, r3
 800518a:	dc31      	bgt.n	80051f0 <__kernel_rem_pio2+0xd8>
 800518c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8005428 <__kernel_rem_pio2+0x310>
 8005190:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005194:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005198:	462f      	mov	r7, r5
 800519a:	2600      	movs	r6, #0
 800519c:	e01b      	b.n	80051d6 <__kernel_rem_pio2+0xbe>
 800519e:	42ef      	cmn	r7, r5
 80051a0:	d407      	bmi.n	80051b2 <__kernel_rem_pio2+0x9a>
 80051a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80051a6:	f7fb fab3 	bl	8000710 <__aeabi_i2d>
 80051aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80051ae:	3501      	adds	r5, #1
 80051b0:	e7df      	b.n	8005172 <__kernel_rem_pio2+0x5a>
 80051b2:	ec51 0b18 	vmov	r0, r1, d8
 80051b6:	e7f8      	b.n	80051aa <__kernel_rem_pio2+0x92>
 80051b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80051c0:	f7fb f82a 	bl	8000218 <__aeabi_dmul>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051cc:	f7fb f954 	bl	8000478 <__adddf3>
 80051d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051d4:	3601      	adds	r6, #1
 80051d6:	9b05      	ldr	r3, [sp, #20]
 80051d8:	429e      	cmp	r6, r3
 80051da:	f1a7 0708 	sub.w	r7, r7, #8
 80051de:	ddeb      	ble.n	80051b8 <__kernel_rem_pio2+0xa0>
 80051e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80051e4:	f108 0801 	add.w	r8, r8, #1
 80051e8:	ecab 7b02 	vstmia	fp!, {d7}
 80051ec:	3508      	adds	r5, #8
 80051ee:	e7ca      	b.n	8005186 <__kernel_rem_pio2+0x6e>
 80051f0:	9b00      	ldr	r3, [sp, #0]
 80051f2:	aa0c      	add	r2, sp, #48	; 0x30
 80051f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80051f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80051fa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80051fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005200:	9c00      	ldr	r4, [sp, #0]
 8005202:	930a      	str	r3, [sp, #40]	; 0x28
 8005204:	00e3      	lsls	r3, r4, #3
 8005206:	9308      	str	r3, [sp, #32]
 8005208:	ab98      	add	r3, sp, #608	; 0x260
 800520a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800520e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005212:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8005216:	ab70      	add	r3, sp, #448	; 0x1c0
 8005218:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800521c:	46c3      	mov	fp, r8
 800521e:	46a1      	mov	r9, r4
 8005220:	f1b9 0f00 	cmp.w	r9, #0
 8005224:	f1a5 0508 	sub.w	r5, r5, #8
 8005228:	dc77      	bgt.n	800531a <__kernel_rem_pio2+0x202>
 800522a:	ec47 6b10 	vmov	d0, r6, r7
 800522e:	4650      	mov	r0, sl
 8005230:	f000 fac2 	bl	80057b8 <scalbn>
 8005234:	ec57 6b10 	vmov	r6, r7, d0
 8005238:	2200      	movs	r2, #0
 800523a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800523e:	ee10 0a10 	vmov	r0, s0
 8005242:	4639      	mov	r1, r7
 8005244:	f7fa ffe8 	bl	8000218 <__aeabi_dmul>
 8005248:	ec41 0b10 	vmov	d0, r0, r1
 800524c:	f000 fb34 	bl	80058b8 <floor>
 8005250:	4b7a      	ldr	r3, [pc, #488]	; (800543c <__kernel_rem_pio2+0x324>)
 8005252:	ec51 0b10 	vmov	r0, r1, d0
 8005256:	2200      	movs	r2, #0
 8005258:	f7fa ffde 	bl	8000218 <__aeabi_dmul>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	4630      	mov	r0, r6
 8005262:	4639      	mov	r1, r7
 8005264:	f7fb f906 	bl	8000474 <__aeabi_dsub>
 8005268:	460f      	mov	r7, r1
 800526a:	4606      	mov	r6, r0
 800526c:	f7fb fb42 	bl	80008f4 <__aeabi_d2iz>
 8005270:	9002      	str	r0, [sp, #8]
 8005272:	f7fb fa4d 	bl	8000710 <__aeabi_i2d>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4630      	mov	r0, r6
 800527c:	4639      	mov	r1, r7
 800527e:	f7fb f8f9 	bl	8000474 <__aeabi_dsub>
 8005282:	f1ba 0f00 	cmp.w	sl, #0
 8005286:	4606      	mov	r6, r0
 8005288:	460f      	mov	r7, r1
 800528a:	dd6d      	ble.n	8005368 <__kernel_rem_pio2+0x250>
 800528c:	1e61      	subs	r1, r4, #1
 800528e:	ab0c      	add	r3, sp, #48	; 0x30
 8005290:	9d02      	ldr	r5, [sp, #8]
 8005292:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005296:	f1ca 0018 	rsb	r0, sl, #24
 800529a:	fa43 f200 	asr.w	r2, r3, r0
 800529e:	4415      	add	r5, r2
 80052a0:	4082      	lsls	r2, r0
 80052a2:	1a9b      	subs	r3, r3, r2
 80052a4:	aa0c      	add	r2, sp, #48	; 0x30
 80052a6:	9502      	str	r5, [sp, #8]
 80052a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80052ac:	f1ca 0217 	rsb	r2, sl, #23
 80052b0:	fa43 fb02 	asr.w	fp, r3, r2
 80052b4:	f1bb 0f00 	cmp.w	fp, #0
 80052b8:	dd65      	ble.n	8005386 <__kernel_rem_pio2+0x26e>
 80052ba:	9b02      	ldr	r3, [sp, #8]
 80052bc:	2200      	movs	r2, #0
 80052be:	3301      	adds	r3, #1
 80052c0:	9302      	str	r3, [sp, #8]
 80052c2:	4615      	mov	r5, r2
 80052c4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80052c8:	4294      	cmp	r4, r2
 80052ca:	f300 809f 	bgt.w	800540c <__kernel_rem_pio2+0x2f4>
 80052ce:	f1ba 0f00 	cmp.w	sl, #0
 80052d2:	dd07      	ble.n	80052e4 <__kernel_rem_pio2+0x1cc>
 80052d4:	f1ba 0f01 	cmp.w	sl, #1
 80052d8:	f000 80c1 	beq.w	800545e <__kernel_rem_pio2+0x346>
 80052dc:	f1ba 0f02 	cmp.w	sl, #2
 80052e0:	f000 80c7 	beq.w	8005472 <__kernel_rem_pio2+0x35a>
 80052e4:	f1bb 0f02 	cmp.w	fp, #2
 80052e8:	d14d      	bne.n	8005386 <__kernel_rem_pio2+0x26e>
 80052ea:	4632      	mov	r2, r6
 80052ec:	463b      	mov	r3, r7
 80052ee:	4954      	ldr	r1, [pc, #336]	; (8005440 <__kernel_rem_pio2+0x328>)
 80052f0:	2000      	movs	r0, #0
 80052f2:	f7fb f8bf 	bl	8000474 <__aeabi_dsub>
 80052f6:	4606      	mov	r6, r0
 80052f8:	460f      	mov	r7, r1
 80052fa:	2d00      	cmp	r5, #0
 80052fc:	d043      	beq.n	8005386 <__kernel_rem_pio2+0x26e>
 80052fe:	4650      	mov	r0, sl
 8005300:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8005430 <__kernel_rem_pio2+0x318>
 8005304:	f000 fa58 	bl	80057b8 <scalbn>
 8005308:	4630      	mov	r0, r6
 800530a:	4639      	mov	r1, r7
 800530c:	ec53 2b10 	vmov	r2, r3, d0
 8005310:	f7fb f8b0 	bl	8000474 <__aeabi_dsub>
 8005314:	4606      	mov	r6, r0
 8005316:	460f      	mov	r7, r1
 8005318:	e035      	b.n	8005386 <__kernel_rem_pio2+0x26e>
 800531a:	4b4a      	ldr	r3, [pc, #296]	; (8005444 <__kernel_rem_pio2+0x32c>)
 800531c:	2200      	movs	r2, #0
 800531e:	4630      	mov	r0, r6
 8005320:	4639      	mov	r1, r7
 8005322:	f7fa ff79 	bl	8000218 <__aeabi_dmul>
 8005326:	f7fb fae5 	bl	80008f4 <__aeabi_d2iz>
 800532a:	f7fb f9f1 	bl	8000710 <__aeabi_i2d>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	ec43 2b18 	vmov	d8, r2, r3
 8005336:	4b44      	ldr	r3, [pc, #272]	; (8005448 <__kernel_rem_pio2+0x330>)
 8005338:	2200      	movs	r2, #0
 800533a:	f7fa ff6d 	bl	8000218 <__aeabi_dmul>
 800533e:	4602      	mov	r2, r0
 8005340:	460b      	mov	r3, r1
 8005342:	4630      	mov	r0, r6
 8005344:	4639      	mov	r1, r7
 8005346:	f7fb f895 	bl	8000474 <__aeabi_dsub>
 800534a:	f7fb fad3 	bl	80008f4 <__aeabi_d2iz>
 800534e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005352:	f84b 0b04 	str.w	r0, [fp], #4
 8005356:	ec51 0b18 	vmov	r0, r1, d8
 800535a:	f7fb f88d 	bl	8000478 <__adddf3>
 800535e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005362:	4606      	mov	r6, r0
 8005364:	460f      	mov	r7, r1
 8005366:	e75b      	b.n	8005220 <__kernel_rem_pio2+0x108>
 8005368:	d106      	bne.n	8005378 <__kernel_rem_pio2+0x260>
 800536a:	1e63      	subs	r3, r4, #1
 800536c:	aa0c      	add	r2, sp, #48	; 0x30
 800536e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005372:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8005376:	e79d      	b.n	80052b4 <__kernel_rem_pio2+0x19c>
 8005378:	4b34      	ldr	r3, [pc, #208]	; (800544c <__kernel_rem_pio2+0x334>)
 800537a:	2200      	movs	r2, #0
 800537c:	f7fb faa6 	bl	80008cc <__aeabi_dcmpge>
 8005380:	2800      	cmp	r0, #0
 8005382:	d140      	bne.n	8005406 <__kernel_rem_pio2+0x2ee>
 8005384:	4683      	mov	fp, r0
 8005386:	2200      	movs	r2, #0
 8005388:	2300      	movs	r3, #0
 800538a:	4630      	mov	r0, r6
 800538c:	4639      	mov	r1, r7
 800538e:	f7fb fa7f 	bl	8000890 <__aeabi_dcmpeq>
 8005392:	2800      	cmp	r0, #0
 8005394:	f000 80c1 	beq.w	800551a <__kernel_rem_pio2+0x402>
 8005398:	1e65      	subs	r5, r4, #1
 800539a:	462b      	mov	r3, r5
 800539c:	2200      	movs	r2, #0
 800539e:	9900      	ldr	r1, [sp, #0]
 80053a0:	428b      	cmp	r3, r1
 80053a2:	da6d      	bge.n	8005480 <__kernel_rem_pio2+0x368>
 80053a4:	2a00      	cmp	r2, #0
 80053a6:	f000 808a 	beq.w	80054be <__kernel_rem_pio2+0x3a6>
 80053aa:	ab0c      	add	r3, sp, #48	; 0x30
 80053ac:	f1aa 0a18 	sub.w	sl, sl, #24
 80053b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 80ae 	beq.w	8005516 <__kernel_rem_pio2+0x3fe>
 80053ba:	4650      	mov	r0, sl
 80053bc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8005430 <__kernel_rem_pio2+0x318>
 80053c0:	f000 f9fa 	bl	80057b8 <scalbn>
 80053c4:	1c6b      	adds	r3, r5, #1
 80053c6:	00da      	lsls	r2, r3, #3
 80053c8:	9205      	str	r2, [sp, #20]
 80053ca:	ec57 6b10 	vmov	r6, r7, d0
 80053ce:	aa70      	add	r2, sp, #448	; 0x1c0
 80053d0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8005444 <__kernel_rem_pio2+0x32c>
 80053d4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80053d8:	462c      	mov	r4, r5
 80053da:	f04f 0800 	mov.w	r8, #0
 80053de:	2c00      	cmp	r4, #0
 80053e0:	f280 80d4 	bge.w	800558c <__kernel_rem_pio2+0x474>
 80053e4:	462c      	mov	r4, r5
 80053e6:	2c00      	cmp	r4, #0
 80053e8:	f2c0 8102 	blt.w	80055f0 <__kernel_rem_pio2+0x4d8>
 80053ec:	4b18      	ldr	r3, [pc, #96]	; (8005450 <__kernel_rem_pio2+0x338>)
 80053ee:	461e      	mov	r6, r3
 80053f0:	ab70      	add	r3, sp, #448	; 0x1c0
 80053f2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80053f6:	1b2b      	subs	r3, r5, r4
 80053f8:	f04f 0900 	mov.w	r9, #0
 80053fc:	f04f 0a00 	mov.w	sl, #0
 8005400:	2700      	movs	r7, #0
 8005402:	9306      	str	r3, [sp, #24]
 8005404:	e0e6      	b.n	80055d4 <__kernel_rem_pio2+0x4bc>
 8005406:	f04f 0b02 	mov.w	fp, #2
 800540a:	e756      	b.n	80052ba <__kernel_rem_pio2+0x1a2>
 800540c:	f8d8 3000 	ldr.w	r3, [r8]
 8005410:	bb05      	cbnz	r5, 8005454 <__kernel_rem_pio2+0x33c>
 8005412:	b123      	cbz	r3, 800541e <__kernel_rem_pio2+0x306>
 8005414:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005418:	f8c8 3000 	str.w	r3, [r8]
 800541c:	2301      	movs	r3, #1
 800541e:	3201      	adds	r2, #1
 8005420:	f108 0804 	add.w	r8, r8, #4
 8005424:	461d      	mov	r5, r3
 8005426:	e74f      	b.n	80052c8 <__kernel_rem_pio2+0x1b0>
	...
 8005434:	3ff00000 	.word	0x3ff00000
 8005438:	08005bd8 	.word	0x08005bd8
 800543c:	40200000 	.word	0x40200000
 8005440:	3ff00000 	.word	0x3ff00000
 8005444:	3e700000 	.word	0x3e700000
 8005448:	41700000 	.word	0x41700000
 800544c:	3fe00000 	.word	0x3fe00000
 8005450:	08005b98 	.word	0x08005b98
 8005454:	1acb      	subs	r3, r1, r3
 8005456:	f8c8 3000 	str.w	r3, [r8]
 800545a:	462b      	mov	r3, r5
 800545c:	e7df      	b.n	800541e <__kernel_rem_pio2+0x306>
 800545e:	1e62      	subs	r2, r4, #1
 8005460:	ab0c      	add	r3, sp, #48	; 0x30
 8005462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005466:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800546a:	a90c      	add	r1, sp, #48	; 0x30
 800546c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005470:	e738      	b.n	80052e4 <__kernel_rem_pio2+0x1cc>
 8005472:	1e62      	subs	r2, r4, #1
 8005474:	ab0c      	add	r3, sp, #48	; 0x30
 8005476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800547a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800547e:	e7f4      	b.n	800546a <__kernel_rem_pio2+0x352>
 8005480:	a90c      	add	r1, sp, #48	; 0x30
 8005482:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005486:	3b01      	subs	r3, #1
 8005488:	430a      	orrs	r2, r1
 800548a:	e788      	b.n	800539e <__kernel_rem_pio2+0x286>
 800548c:	3301      	adds	r3, #1
 800548e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005492:	2900      	cmp	r1, #0
 8005494:	d0fa      	beq.n	800548c <__kernel_rem_pio2+0x374>
 8005496:	9a08      	ldr	r2, [sp, #32]
 8005498:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800549c:	446a      	add	r2, sp
 800549e:	3a98      	subs	r2, #152	; 0x98
 80054a0:	9208      	str	r2, [sp, #32]
 80054a2:	9a06      	ldr	r2, [sp, #24]
 80054a4:	a920      	add	r1, sp, #128	; 0x80
 80054a6:	18a2      	adds	r2, r4, r2
 80054a8:	18e3      	adds	r3, r4, r3
 80054aa:	f104 0801 	add.w	r8, r4, #1
 80054ae:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80054b2:	9302      	str	r3, [sp, #8]
 80054b4:	9b02      	ldr	r3, [sp, #8]
 80054b6:	4543      	cmp	r3, r8
 80054b8:	da04      	bge.n	80054c4 <__kernel_rem_pio2+0x3ac>
 80054ba:	461c      	mov	r4, r3
 80054bc:	e6a2      	b.n	8005204 <__kernel_rem_pio2+0xec>
 80054be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054c0:	2301      	movs	r3, #1
 80054c2:	e7e4      	b.n	800548e <__kernel_rem_pio2+0x376>
 80054c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054c6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80054ca:	f7fb f921 	bl	8000710 <__aeabi_i2d>
 80054ce:	e8e5 0102 	strd	r0, r1, [r5], #8
 80054d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054d4:	46ab      	mov	fp, r5
 80054d6:	461c      	mov	r4, r3
 80054d8:	f04f 0900 	mov.w	r9, #0
 80054dc:	2600      	movs	r6, #0
 80054de:	2700      	movs	r7, #0
 80054e0:	9b05      	ldr	r3, [sp, #20]
 80054e2:	4599      	cmp	r9, r3
 80054e4:	dd06      	ble.n	80054f4 <__kernel_rem_pio2+0x3dc>
 80054e6:	9b08      	ldr	r3, [sp, #32]
 80054e8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80054ec:	f108 0801 	add.w	r8, r8, #1
 80054f0:	9308      	str	r3, [sp, #32]
 80054f2:	e7df      	b.n	80054b4 <__kernel_rem_pio2+0x39c>
 80054f4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80054f8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80054fc:	f7fa fe8c 	bl	8000218 <__aeabi_dmul>
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
 8005504:	4630      	mov	r0, r6
 8005506:	4639      	mov	r1, r7
 8005508:	f7fa ffb6 	bl	8000478 <__adddf3>
 800550c:	f109 0901 	add.w	r9, r9, #1
 8005510:	4606      	mov	r6, r0
 8005512:	460f      	mov	r7, r1
 8005514:	e7e4      	b.n	80054e0 <__kernel_rem_pio2+0x3c8>
 8005516:	3d01      	subs	r5, #1
 8005518:	e747      	b.n	80053aa <__kernel_rem_pio2+0x292>
 800551a:	ec47 6b10 	vmov	d0, r6, r7
 800551e:	f1ca 0000 	rsb	r0, sl, #0
 8005522:	f000 f949 	bl	80057b8 <scalbn>
 8005526:	ec57 6b10 	vmov	r6, r7, d0
 800552a:	4ba0      	ldr	r3, [pc, #640]	; (80057ac <__kernel_rem_pio2+0x694>)
 800552c:	ee10 0a10 	vmov	r0, s0
 8005530:	2200      	movs	r2, #0
 8005532:	4639      	mov	r1, r7
 8005534:	f7fb f9ca 	bl	80008cc <__aeabi_dcmpge>
 8005538:	b1f8      	cbz	r0, 800557a <__kernel_rem_pio2+0x462>
 800553a:	4b9d      	ldr	r3, [pc, #628]	; (80057b0 <__kernel_rem_pio2+0x698>)
 800553c:	2200      	movs	r2, #0
 800553e:	4630      	mov	r0, r6
 8005540:	4639      	mov	r1, r7
 8005542:	f7fa fe69 	bl	8000218 <__aeabi_dmul>
 8005546:	f7fb f9d5 	bl	80008f4 <__aeabi_d2iz>
 800554a:	4680      	mov	r8, r0
 800554c:	f7fb f8e0 	bl	8000710 <__aeabi_i2d>
 8005550:	4b96      	ldr	r3, [pc, #600]	; (80057ac <__kernel_rem_pio2+0x694>)
 8005552:	2200      	movs	r2, #0
 8005554:	f7fa fe60 	bl	8000218 <__aeabi_dmul>
 8005558:	460b      	mov	r3, r1
 800555a:	4602      	mov	r2, r0
 800555c:	4639      	mov	r1, r7
 800555e:	4630      	mov	r0, r6
 8005560:	f7fa ff88 	bl	8000474 <__aeabi_dsub>
 8005564:	f7fb f9c6 	bl	80008f4 <__aeabi_d2iz>
 8005568:	1c65      	adds	r5, r4, #1
 800556a:	ab0c      	add	r3, sp, #48	; 0x30
 800556c:	f10a 0a18 	add.w	sl, sl, #24
 8005570:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005574:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005578:	e71f      	b.n	80053ba <__kernel_rem_pio2+0x2a2>
 800557a:	4630      	mov	r0, r6
 800557c:	4639      	mov	r1, r7
 800557e:	f7fb f9b9 	bl	80008f4 <__aeabi_d2iz>
 8005582:	ab0c      	add	r3, sp, #48	; 0x30
 8005584:	4625      	mov	r5, r4
 8005586:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800558a:	e716      	b.n	80053ba <__kernel_rem_pio2+0x2a2>
 800558c:	ab0c      	add	r3, sp, #48	; 0x30
 800558e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005592:	f7fb f8bd 	bl	8000710 <__aeabi_i2d>
 8005596:	4632      	mov	r2, r6
 8005598:	463b      	mov	r3, r7
 800559a:	f7fa fe3d 	bl	8000218 <__aeabi_dmul>
 800559e:	4642      	mov	r2, r8
 80055a0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80055a4:	464b      	mov	r3, r9
 80055a6:	4630      	mov	r0, r6
 80055a8:	4639      	mov	r1, r7
 80055aa:	f7fa fe35 	bl	8000218 <__aeabi_dmul>
 80055ae:	3c01      	subs	r4, #1
 80055b0:	4606      	mov	r6, r0
 80055b2:	460f      	mov	r7, r1
 80055b4:	e713      	b.n	80053de <__kernel_rem_pio2+0x2c6>
 80055b6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80055ba:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80055be:	f7fa fe2b 	bl	8000218 <__aeabi_dmul>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4648      	mov	r0, r9
 80055c8:	4651      	mov	r1, sl
 80055ca:	f7fa ff55 	bl	8000478 <__adddf3>
 80055ce:	3701      	adds	r7, #1
 80055d0:	4681      	mov	r9, r0
 80055d2:	468a      	mov	sl, r1
 80055d4:	9b00      	ldr	r3, [sp, #0]
 80055d6:	429f      	cmp	r7, r3
 80055d8:	dc02      	bgt.n	80055e0 <__kernel_rem_pio2+0x4c8>
 80055da:	9b06      	ldr	r3, [sp, #24]
 80055dc:	429f      	cmp	r7, r3
 80055de:	ddea      	ble.n	80055b6 <__kernel_rem_pio2+0x49e>
 80055e0:	9a06      	ldr	r2, [sp, #24]
 80055e2:	ab48      	add	r3, sp, #288	; 0x120
 80055e4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80055e8:	e9c6 9a00 	strd	r9, sl, [r6]
 80055ec:	3c01      	subs	r4, #1
 80055ee:	e6fa      	b.n	80053e6 <__kernel_rem_pio2+0x2ce>
 80055f0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	dc0b      	bgt.n	800560e <__kernel_rem_pio2+0x4f6>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	dc39      	bgt.n	800566e <__kernel_rem_pio2+0x556>
 80055fa:	d05d      	beq.n	80056b8 <__kernel_rem_pio2+0x5a0>
 80055fc:	9b02      	ldr	r3, [sp, #8]
 80055fe:	f003 0007 	and.w	r0, r3, #7
 8005602:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005606:	ecbd 8b02 	vpop	{d8}
 800560a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800560e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005610:	2b03      	cmp	r3, #3
 8005612:	d1f3      	bne.n	80055fc <__kernel_rem_pio2+0x4e4>
 8005614:	9b05      	ldr	r3, [sp, #20]
 8005616:	9500      	str	r5, [sp, #0]
 8005618:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800561c:	eb0d 0403 	add.w	r4, sp, r3
 8005620:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8005624:	46a2      	mov	sl, r4
 8005626:	9b00      	ldr	r3, [sp, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	f1aa 0a08 	sub.w	sl, sl, #8
 800562e:	dc69      	bgt.n	8005704 <__kernel_rem_pio2+0x5ec>
 8005630:	46aa      	mov	sl, r5
 8005632:	f1ba 0f01 	cmp.w	sl, #1
 8005636:	f1a4 0408 	sub.w	r4, r4, #8
 800563a:	f300 8083 	bgt.w	8005744 <__kernel_rem_pio2+0x62c>
 800563e:	9c05      	ldr	r4, [sp, #20]
 8005640:	ab48      	add	r3, sp, #288	; 0x120
 8005642:	441c      	add	r4, r3
 8005644:	2000      	movs	r0, #0
 8005646:	2100      	movs	r1, #0
 8005648:	2d01      	cmp	r5, #1
 800564a:	f300 809a 	bgt.w	8005782 <__kernel_rem_pio2+0x66a>
 800564e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8005652:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005656:	f1bb 0f00 	cmp.w	fp, #0
 800565a:	f040 8098 	bne.w	800578e <__kernel_rem_pio2+0x676>
 800565e:	9b04      	ldr	r3, [sp, #16]
 8005660:	e9c3 7800 	strd	r7, r8, [r3]
 8005664:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005668:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800566c:	e7c6      	b.n	80055fc <__kernel_rem_pio2+0x4e4>
 800566e:	9e05      	ldr	r6, [sp, #20]
 8005670:	ab48      	add	r3, sp, #288	; 0x120
 8005672:	441e      	add	r6, r3
 8005674:	462c      	mov	r4, r5
 8005676:	2000      	movs	r0, #0
 8005678:	2100      	movs	r1, #0
 800567a:	2c00      	cmp	r4, #0
 800567c:	da33      	bge.n	80056e6 <__kernel_rem_pio2+0x5ce>
 800567e:	f1bb 0f00 	cmp.w	fp, #0
 8005682:	d036      	beq.n	80056f2 <__kernel_rem_pio2+0x5da>
 8005684:	4602      	mov	r2, r0
 8005686:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800568a:	9c04      	ldr	r4, [sp, #16]
 800568c:	e9c4 2300 	strd	r2, r3, [r4]
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005698:	f7fa feec 	bl	8000474 <__aeabi_dsub>
 800569c:	ae4a      	add	r6, sp, #296	; 0x128
 800569e:	2401      	movs	r4, #1
 80056a0:	42a5      	cmp	r5, r4
 80056a2:	da29      	bge.n	80056f8 <__kernel_rem_pio2+0x5e0>
 80056a4:	f1bb 0f00 	cmp.w	fp, #0
 80056a8:	d002      	beq.n	80056b0 <__kernel_rem_pio2+0x598>
 80056aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056ae:	4619      	mov	r1, r3
 80056b0:	9b04      	ldr	r3, [sp, #16]
 80056b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80056b6:	e7a1      	b.n	80055fc <__kernel_rem_pio2+0x4e4>
 80056b8:	9c05      	ldr	r4, [sp, #20]
 80056ba:	ab48      	add	r3, sp, #288	; 0x120
 80056bc:	441c      	add	r4, r3
 80056be:	2000      	movs	r0, #0
 80056c0:	2100      	movs	r1, #0
 80056c2:	2d00      	cmp	r5, #0
 80056c4:	da09      	bge.n	80056da <__kernel_rem_pio2+0x5c2>
 80056c6:	f1bb 0f00 	cmp.w	fp, #0
 80056ca:	d002      	beq.n	80056d2 <__kernel_rem_pio2+0x5ba>
 80056cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056d0:	4619      	mov	r1, r3
 80056d2:	9b04      	ldr	r3, [sp, #16]
 80056d4:	e9c3 0100 	strd	r0, r1, [r3]
 80056d8:	e790      	b.n	80055fc <__kernel_rem_pio2+0x4e4>
 80056da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80056de:	f7fa fecb 	bl	8000478 <__adddf3>
 80056e2:	3d01      	subs	r5, #1
 80056e4:	e7ed      	b.n	80056c2 <__kernel_rem_pio2+0x5aa>
 80056e6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80056ea:	f7fa fec5 	bl	8000478 <__adddf3>
 80056ee:	3c01      	subs	r4, #1
 80056f0:	e7c3      	b.n	800567a <__kernel_rem_pio2+0x562>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	e7c8      	b.n	800568a <__kernel_rem_pio2+0x572>
 80056f8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80056fc:	f7fa febc 	bl	8000478 <__adddf3>
 8005700:	3401      	adds	r4, #1
 8005702:	e7cd      	b.n	80056a0 <__kernel_rem_pio2+0x588>
 8005704:	e9da 8900 	ldrd	r8, r9, [sl]
 8005708:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800570c:	9b00      	ldr	r3, [sp, #0]
 800570e:	3b01      	subs	r3, #1
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	4632      	mov	r2, r6
 8005714:	463b      	mov	r3, r7
 8005716:	4640      	mov	r0, r8
 8005718:	4649      	mov	r1, r9
 800571a:	f7fa fead 	bl	8000478 <__adddf3>
 800571e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4640      	mov	r0, r8
 8005728:	4649      	mov	r1, r9
 800572a:	f7fa fea3 	bl	8000474 <__aeabi_dsub>
 800572e:	4632      	mov	r2, r6
 8005730:	463b      	mov	r3, r7
 8005732:	f7fa fea1 	bl	8000478 <__adddf3>
 8005736:	ed9d 7b06 	vldr	d7, [sp, #24]
 800573a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800573e:	ed8a 7b00 	vstr	d7, [sl]
 8005742:	e770      	b.n	8005626 <__kernel_rem_pio2+0x50e>
 8005744:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005748:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800574c:	4640      	mov	r0, r8
 800574e:	4632      	mov	r2, r6
 8005750:	463b      	mov	r3, r7
 8005752:	4649      	mov	r1, r9
 8005754:	f7fa fe90 	bl	8000478 <__adddf3>
 8005758:	e9cd 0100 	strd	r0, r1, [sp]
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4640      	mov	r0, r8
 8005762:	4649      	mov	r1, r9
 8005764:	f7fa fe86 	bl	8000474 <__aeabi_dsub>
 8005768:	4632      	mov	r2, r6
 800576a:	463b      	mov	r3, r7
 800576c:	f7fa fe84 	bl	8000478 <__adddf3>
 8005770:	ed9d 7b00 	vldr	d7, [sp]
 8005774:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005778:	ed84 7b00 	vstr	d7, [r4]
 800577c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005780:	e757      	b.n	8005632 <__kernel_rem_pio2+0x51a>
 8005782:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005786:	f7fa fe77 	bl	8000478 <__adddf3>
 800578a:	3d01      	subs	r5, #1
 800578c:	e75c      	b.n	8005648 <__kernel_rem_pio2+0x530>
 800578e:	9b04      	ldr	r3, [sp, #16]
 8005790:	9a04      	ldr	r2, [sp, #16]
 8005792:	601f      	str	r7, [r3, #0]
 8005794:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005798:	605c      	str	r4, [r3, #4]
 800579a:	609d      	str	r5, [r3, #8]
 800579c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80057a0:	60d3      	str	r3, [r2, #12]
 80057a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057a6:	6110      	str	r0, [r2, #16]
 80057a8:	6153      	str	r3, [r2, #20]
 80057aa:	e727      	b.n	80055fc <__kernel_rem_pio2+0x4e4>
 80057ac:	41700000 	.word	0x41700000
 80057b0:	3e700000 	.word	0x3e700000
 80057b4:	00000000 	.word	0x00000000

080057b8 <scalbn>:
 80057b8:	b570      	push	{r4, r5, r6, lr}
 80057ba:	ec55 4b10 	vmov	r4, r5, d0
 80057be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80057c2:	4606      	mov	r6, r0
 80057c4:	462b      	mov	r3, r5
 80057c6:	b999      	cbnz	r1, 80057f0 <scalbn+0x38>
 80057c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80057cc:	4323      	orrs	r3, r4
 80057ce:	d03f      	beq.n	8005850 <scalbn+0x98>
 80057d0:	4b35      	ldr	r3, [pc, #212]	; (80058a8 <scalbn+0xf0>)
 80057d2:	4629      	mov	r1, r5
 80057d4:	ee10 0a10 	vmov	r0, s0
 80057d8:	2200      	movs	r2, #0
 80057da:	f7fa fd1d 	bl	8000218 <__aeabi_dmul>
 80057de:	4b33      	ldr	r3, [pc, #204]	; (80058ac <scalbn+0xf4>)
 80057e0:	429e      	cmp	r6, r3
 80057e2:	4604      	mov	r4, r0
 80057e4:	460d      	mov	r5, r1
 80057e6:	da10      	bge.n	800580a <scalbn+0x52>
 80057e8:	a327      	add	r3, pc, #156	; (adr r3, 8005888 <scalbn+0xd0>)
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	e01f      	b.n	8005830 <scalbn+0x78>
 80057f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80057f4:	4291      	cmp	r1, r2
 80057f6:	d10c      	bne.n	8005812 <scalbn+0x5a>
 80057f8:	ee10 2a10 	vmov	r2, s0
 80057fc:	4620      	mov	r0, r4
 80057fe:	4629      	mov	r1, r5
 8005800:	f7fa fe3a 	bl	8000478 <__adddf3>
 8005804:	4604      	mov	r4, r0
 8005806:	460d      	mov	r5, r1
 8005808:	e022      	b.n	8005850 <scalbn+0x98>
 800580a:	460b      	mov	r3, r1
 800580c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005810:	3936      	subs	r1, #54	; 0x36
 8005812:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005816:	4296      	cmp	r6, r2
 8005818:	dd0d      	ble.n	8005836 <scalbn+0x7e>
 800581a:	2d00      	cmp	r5, #0
 800581c:	a11c      	add	r1, pc, #112	; (adr r1, 8005890 <scalbn+0xd8>)
 800581e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005822:	da02      	bge.n	800582a <scalbn+0x72>
 8005824:	a11c      	add	r1, pc, #112	; (adr r1, 8005898 <scalbn+0xe0>)
 8005826:	e9d1 0100 	ldrd	r0, r1, [r1]
 800582a:	a319      	add	r3, pc, #100	; (adr r3, 8005890 <scalbn+0xd8>)
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f7fa fcf2 	bl	8000218 <__aeabi_dmul>
 8005834:	e7e6      	b.n	8005804 <scalbn+0x4c>
 8005836:	1872      	adds	r2, r6, r1
 8005838:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800583c:	428a      	cmp	r2, r1
 800583e:	dcec      	bgt.n	800581a <scalbn+0x62>
 8005840:	2a00      	cmp	r2, #0
 8005842:	dd08      	ble.n	8005856 <scalbn+0x9e>
 8005844:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005848:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800584c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005850:	ec45 4b10 	vmov	d0, r4, r5
 8005854:	bd70      	pop	{r4, r5, r6, pc}
 8005856:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800585a:	da08      	bge.n	800586e <scalbn+0xb6>
 800585c:	2d00      	cmp	r5, #0
 800585e:	a10a      	add	r1, pc, #40	; (adr r1, 8005888 <scalbn+0xd0>)
 8005860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005864:	dac0      	bge.n	80057e8 <scalbn+0x30>
 8005866:	a10e      	add	r1, pc, #56	; (adr r1, 80058a0 <scalbn+0xe8>)
 8005868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800586c:	e7bc      	b.n	80057e8 <scalbn+0x30>
 800586e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005872:	3236      	adds	r2, #54	; 0x36
 8005874:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005878:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800587c:	4620      	mov	r0, r4
 800587e:	4b0c      	ldr	r3, [pc, #48]	; (80058b0 <scalbn+0xf8>)
 8005880:	2200      	movs	r2, #0
 8005882:	e7d5      	b.n	8005830 <scalbn+0x78>
 8005884:	f3af 8000 	nop.w
 8005888:	c2f8f359 	.word	0xc2f8f359
 800588c:	01a56e1f 	.word	0x01a56e1f
 8005890:	8800759c 	.word	0x8800759c
 8005894:	7e37e43c 	.word	0x7e37e43c
 8005898:	8800759c 	.word	0x8800759c
 800589c:	fe37e43c 	.word	0xfe37e43c
 80058a0:	c2f8f359 	.word	0xc2f8f359
 80058a4:	81a56e1f 	.word	0x81a56e1f
 80058a8:	43500000 	.word	0x43500000
 80058ac:	ffff3cb0 	.word	0xffff3cb0
 80058b0:	3c900000 	.word	0x3c900000
 80058b4:	00000000 	.word	0x00000000

080058b8 <floor>:
 80058b8:	ec51 0b10 	vmov	r0, r1, d0
 80058bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80058c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80058c8:	2e13      	cmp	r6, #19
 80058ca:	ee10 5a10 	vmov	r5, s0
 80058ce:	ee10 8a10 	vmov	r8, s0
 80058d2:	460c      	mov	r4, r1
 80058d4:	dc31      	bgt.n	800593a <floor+0x82>
 80058d6:	2e00      	cmp	r6, #0
 80058d8:	da14      	bge.n	8005904 <floor+0x4c>
 80058da:	a333      	add	r3, pc, #204	; (adr r3, 80059a8 <floor+0xf0>)
 80058dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e0:	f7fa fdca 	bl	8000478 <__adddf3>
 80058e4:	2200      	movs	r2, #0
 80058e6:	2300      	movs	r3, #0
 80058e8:	f7fa fffa 	bl	80008e0 <__aeabi_dcmpgt>
 80058ec:	b138      	cbz	r0, 80058fe <floor+0x46>
 80058ee:	2c00      	cmp	r4, #0
 80058f0:	da53      	bge.n	800599a <floor+0xe2>
 80058f2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80058f6:	4325      	orrs	r5, r4
 80058f8:	d052      	beq.n	80059a0 <floor+0xe8>
 80058fa:	4c2d      	ldr	r4, [pc, #180]	; (80059b0 <floor+0xf8>)
 80058fc:	2500      	movs	r5, #0
 80058fe:	4621      	mov	r1, r4
 8005900:	4628      	mov	r0, r5
 8005902:	e024      	b.n	800594e <floor+0x96>
 8005904:	4f2b      	ldr	r7, [pc, #172]	; (80059b4 <floor+0xfc>)
 8005906:	4137      	asrs	r7, r6
 8005908:	ea01 0307 	and.w	r3, r1, r7
 800590c:	4303      	orrs	r3, r0
 800590e:	d01e      	beq.n	800594e <floor+0x96>
 8005910:	a325      	add	r3, pc, #148	; (adr r3, 80059a8 <floor+0xf0>)
 8005912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005916:	f7fa fdaf 	bl	8000478 <__adddf3>
 800591a:	2200      	movs	r2, #0
 800591c:	2300      	movs	r3, #0
 800591e:	f7fa ffdf 	bl	80008e0 <__aeabi_dcmpgt>
 8005922:	2800      	cmp	r0, #0
 8005924:	d0eb      	beq.n	80058fe <floor+0x46>
 8005926:	2c00      	cmp	r4, #0
 8005928:	bfbe      	ittt	lt
 800592a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800592e:	4133      	asrlt	r3, r6
 8005930:	18e4      	addlt	r4, r4, r3
 8005932:	ea24 0407 	bic.w	r4, r4, r7
 8005936:	2500      	movs	r5, #0
 8005938:	e7e1      	b.n	80058fe <floor+0x46>
 800593a:	2e33      	cmp	r6, #51	; 0x33
 800593c:	dd0b      	ble.n	8005956 <floor+0x9e>
 800593e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005942:	d104      	bne.n	800594e <floor+0x96>
 8005944:	ee10 2a10 	vmov	r2, s0
 8005948:	460b      	mov	r3, r1
 800594a:	f7fa fd95 	bl	8000478 <__adddf3>
 800594e:	ec41 0b10 	vmov	d0, r0, r1
 8005952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005956:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800595a:	f04f 37ff 	mov.w	r7, #4294967295
 800595e:	40df      	lsrs	r7, r3
 8005960:	4238      	tst	r0, r7
 8005962:	d0f4      	beq.n	800594e <floor+0x96>
 8005964:	a310      	add	r3, pc, #64	; (adr r3, 80059a8 <floor+0xf0>)
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	f7fa fd85 	bl	8000478 <__adddf3>
 800596e:	2200      	movs	r2, #0
 8005970:	2300      	movs	r3, #0
 8005972:	f7fa ffb5 	bl	80008e0 <__aeabi_dcmpgt>
 8005976:	2800      	cmp	r0, #0
 8005978:	d0c1      	beq.n	80058fe <floor+0x46>
 800597a:	2c00      	cmp	r4, #0
 800597c:	da0a      	bge.n	8005994 <floor+0xdc>
 800597e:	2e14      	cmp	r6, #20
 8005980:	d101      	bne.n	8005986 <floor+0xce>
 8005982:	3401      	adds	r4, #1
 8005984:	e006      	b.n	8005994 <floor+0xdc>
 8005986:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800598a:	2301      	movs	r3, #1
 800598c:	40b3      	lsls	r3, r6
 800598e:	441d      	add	r5, r3
 8005990:	45a8      	cmp	r8, r5
 8005992:	d8f6      	bhi.n	8005982 <floor+0xca>
 8005994:	ea25 0507 	bic.w	r5, r5, r7
 8005998:	e7b1      	b.n	80058fe <floor+0x46>
 800599a:	2500      	movs	r5, #0
 800599c:	462c      	mov	r4, r5
 800599e:	e7ae      	b.n	80058fe <floor+0x46>
 80059a0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80059a4:	e7ab      	b.n	80058fe <floor+0x46>
 80059a6:	bf00      	nop
 80059a8:	8800759c 	.word	0x8800759c
 80059ac:	7e37e43c 	.word	0x7e37e43c
 80059b0:	bff00000 	.word	0xbff00000
 80059b4:	000fffff 	.word	0x000fffff

080059b8 <_init>:
 80059b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ba:	bf00      	nop
 80059bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059be:	bc08      	pop	{r3}
 80059c0:	469e      	mov	lr, r3
 80059c2:	4770      	bx	lr

080059c4 <_fini>:
 80059c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c6:	bf00      	nop
 80059c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ca:	bc08      	pop	{r3}
 80059cc:	469e      	mov	lr, r3
 80059ce:	4770      	bx	lr
